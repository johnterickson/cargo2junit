<?xml version="1.0" encoding="utf-8"?>
<testsuites>
  <testsuite id="0" name="cargo test #0" package="testsuite/cargo test #0" tests="25" errors="0" failures="0" hostname="localhost" timestamp="2020-06-15T20:58:06.193288200+00:00" time="0">
    <testcase name="core::package_id_spec::tests::bad_parsing" time="0" />
    <testcase name="core::package_id_spec::tests::good_parsing" time="0" />
    <testcase name="core::package_id::tests::invalid_version_handled_nicely" time="0" />
    <testcase name="core::package_id::tests::display" time="0" />
    <testcase name="core::package_id_spec::tests::matching" time="0" />
    <testcase name="core::package_id::tests::debug" time="0" />
    <testcase name="sources::git::source::test::test_canonicalize_cannot_be_a_base_urls" time="0" />
    <testcase name="core::source::source_id::tests::github_sources_equal" time="0" />
    <testcase name="sources::git::source::test::test_canonicalize_idents_different_protocols" time="0" />
    <testcase name="sources::git::source::test::test_canonicalize_idents_by_lowercasing_github_urls" time="0" />
    <testcase name="sources::git::source::test::test_canonicalize_idents_by_stripping_dot_git" time="0" />
    <testcase name="sources::git::source::test::test_canonicalize_idents_by_stripping_trailing_url_slash" time="0" />
    <testcase name="sources::git::source::test::test_url_to_path_ident_with_path" time="0" />
    <testcase name="sources::git::source::test::test_url_to_path_ident_without_path" time="0" />
    <testcase name="sources::registry::index::no_hyphen" time="0" />
    <testcase name="sources::registry::index::two_hyphen" time="0" />
    <testcase name="sources::registry::index::overflow_hyphen" time="0" />
    <testcase name="util::dependency_queue::test::deep_first" time="0" />
    <testcase name="sources::registry::escaped_cher_in_json" time="0" />
    <testcase name="util::progress::test_progress_status" time="0" />
    <testcase name="util::progress::test_progress_status_percentage" time="0" />
    <testcase name="util::progress::test_progress_status_too_short" time="0" />
    <testcase name="util::network::with_retry_repeats_the_call_then_works" time="0" />
    <testcase name="util::network::with_retry_finds_nested_spurious_errors" time="0" />
    <testcase name="util::lev_distance::test_lev_distance" time="0" />
    <system-out />
    <system-err />
  </testsuite>
  <testsuite id="1" name="cargo test #1" package="testsuite/cargo test #1" tests="1503" errors="0" failures="2" hostname="localhost" timestamp="2020-06-15T20:58:06.193288200+00:00" time="0">
    <testcase name="alt_registry::bad_registry_name" time="0" />
    <testcase name="aaa_trigger_cross_compile_disabled_check" time="0">
      <failure type="cargo test" message="thread &apos;aaa_trigger_cross_compile_disabled_check&apos; panicked at &apos;Cannot cross compile to i686-pc-windows-msvc.&#xA;&#xA;This failure can be safely ignored. If you would prefer to not see this&#xA;failure, you can set the environment variable CFG_DISABLE_CROSS_TESTS to &quot;1&quot;.&#xA;&#xA;Alternatively, you can install the necessary libraries for cross-compilation with&#xA;&#xA;    rustup target add i686-pc-windows-msvc&#xA;&apos;, tests\testsuite\support\cross_compile.rs:92:5&#xA;note: Run with `RUST_BACKTRACE=1` for a backtrace.&#xA;" />
    </testcase>
    <testcase name="alt_registry::alt_reg_metadata" time="0" />
    <testcase name="alt_registry::cannot_publish_to_crates_io_with_registry_dependency" time="0" />
    <testcase name="alt_registry::alt_registry_and_crates_io_deps" time="0" />
    <testcase name="alt_registry::block_publish_due_to_no_token" time="0" />
    <testcase name="alt_registry::depend_on_alt_registry_depends_on_crates_io" time="0" />
    <testcase name="alt_registry::depend_on_alt_registry" time="0" />
    <testcase name="alt_registry::is_feature_gated" time="0" />
    <testcase name="alt_registry::depend_on_alt_registry_depends_on_same_registry" time="0" />
    <testcase name="alt_registry::depend_on_alt_registry_depends_on_same_registry_no_index" time="0" />
    <testcase name="alt_registry::passwords_in_url_forbidden" time="0" />
    <testcase name="alt_registry::patch_alt_reg" time="0" />
    <testcase name="alt_registry::no_api" time="0" />
    <testcase name="alt_registry::publish_to_alt_registry" time="0" />
    <testcase name="alt_registry::registry_incompatible_with_git" time="0" />
    <testcase name="alt_registry::publish_with_crates_io_dep" time="0" />
    <testcase name="alt_registry::registry_and_path_dep_works" time="0" />
    <testcase name="alt_registry::publish_with_registry_dependency" time="0" />
    <testcase name="bad_config::bad1" time="0" />
    <testcase name="bad_config::bad2" time="0" />
    <testcase name="bad_config::bad4" time="0" />
    <testcase name="bad_config::bad3" time="0" />
    <testcase name="bad_config::bad6" time="0" />
    <testcase name="bad_config::bad_cargo_config_jobs" time="0" />
    <testcase name="bad_config::bad_cargo_lock" time="0" />
    <testcase name="bad_config::bad_debuginfo" time="0" />
    <testcase name="bad_config::bad_dependency" time="0" />
    <testcase name="alt_registry::unknown_registry" time="0" />
    <testcase name="bad_config::bad_git_dependency" time="0" />
    <testcase name="bad_config::bad_crate_type" time="0" />
    <testcase name="bad_config::bad_opt_level" time="0" />
    <testcase name="bad_config::bad_source_config1" time="0" />
    <testcase name="bad_config::bad_source_config2" time="0" />
    <testcase name="bad_config::bad_source_config3" time="0" />
    <testcase name="bad_config::bad_source_config4" time="0" />
    <testcase name="bad_config::bad_dependency_in_lockfile" time="0" />
    <testcase name="bad_config::bad_source_config5" time="0" />
    <testcase name="bad_config::bad_source_config6" time="0" />
    <testcase name="bad_config::bad_source_in_cargo_lock" time="0" />
    <testcase name="bad_config::bad_source_config7" time="0" />
    <testcase name="bad_config::duplicate_bench_names" time="0" />
    <testcase name="bad_config::duplicate_binary_names" time="0" />
    <testcase name="bad_config::duplicate_deps" time="0" />
    <testcase name="bad_config::duplicate_deps_diff_sources" time="0" />
    <testcase name="bad_config::duplicate_example_names" time="0" />
    <testcase name="bad_config::default_cargo_config_jobs" time="0" />
    <testcase name="bad_config::ambiguous_git_reference" time="0" />
    <testcase name="bad_config::duplicate_packages_in_cargo_lock" time="0" />
    <testcase name="bad_config::ignored_git_revision" time="0" />
    <testcase name="bad_config::invalid_global_config" time="0" />
    <testcase name="bad_config::good_cargo_config_jobs" time="0" />
    <testcase name="bad_config::malformed_override" time="0" />
    <testcase name="bad_config::invalid_toml_historically_allowed_is_warned" time="0" />
    <testcase name="bad_config::empty_dependencies" time="0" />
    <testcase name="bad_manifest_path::bench_dir_containing_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::bench_dir_plus_file" time="0" />
    <testcase name="bad_manifest_path::bench_dir_plus_path" time="0" />
    <testcase name="bad_manifest_path::bench_dir_to_nonexistent_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::build_dir_containing_cargo_toml" time="0" />
    <testcase name="bad_config::unused_keys_in_virtual_manifest" time="0" />
    <testcase name="bad_manifest_path::build_dir_plus_file" time="0" />
    <testcase name="bad_manifest_path::build_dir_plus_path" time="0" />
    <testcase name="bad_manifest_path::build_dir_to_nonexistent_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::clean_dir_containing_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::clean_dir_plus_file" time="0" />
    <testcase name="bad_manifest_path::clean_dir_plus_path" time="0" />
    <testcase name="bad_manifest_path::clean_dir_to_nonexistent_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::doc_dir_containing_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::doc_dir_plus_file" time="0" />
    <testcase name="bad_manifest_path::doc_dir_plus_path" time="0" />
    <testcase name="bad_manifest_path::doc_dir_to_nonexistent_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::fetch_dir_containing_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::fetch_dir_plus_file" time="0" />
    <testcase name="bad_config::both_git_and_path_specified" time="0" />
    <testcase name="bad_manifest_path::fetch_dir_plus_path" time="0" />
    <testcase name="bad_manifest_path::fetch_dir_to_nonexistent_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::generate_lockfile_dir_plus_file" time="0" />
    <testcase name="bad_manifest_path::generate_lockfile_dir_containing_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::generate_lockfile_dir_plus_path" time="0" />
    <testcase name="bad_manifest_path::generate_lockfile_dir_to_nonexistent_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::package_dir_containing_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::package_dir_plus_file" time="0" />
    <testcase name="bad_manifest_path::package_dir_plus_path" time="0" />
    <testcase name="bad_manifest_path::package_dir_to_nonexistent_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::pkgid_dir_containing_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::pkgid_dir_plus_file" time="0" />
    <testcase name="bad_manifest_path::pkgid_dir_plus_path" time="0" />
    <testcase name="bad_manifest_path::pkgid_dir_to_nonexistent_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::publish_dir_containing_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::publish_dir_plus_file" time="0" />
    <testcase name="bad_manifest_path::publish_dir_plus_path" time="0" />
    <testcase name="bad_manifest_path::publish_dir_to_nonexistent_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::read_manifest_dir_containing_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::read_manifest_dir_plus_file" time="0" />
    <testcase name="bad_manifest_path::read_manifest_dir_plus_path" time="0" />
    <testcase name="bad_manifest_path::read_manifest_dir_to_nonexistent_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::run_dir_containing_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::run_dir_plus_file" time="0" />
    <testcase name="bad_manifest_path::run_dir_plus_path" time="0" />
    <testcase name="bad_manifest_path::run_dir_to_nonexistent_cargo_toml" time="0" />
    <testcase name="bad_config::unused_keys" time="0" />
    <testcase name="bad_manifest_path::rustc_dir_containing_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::rustc_dir_plus_file" time="0" />
    <testcase name="bad_manifest_path::rustc_dir_plus_path" time="0" />
    <testcase name="bad_manifest_path::rustc_dir_to_nonexistent_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::test_dir_containing_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::test_dir_plus_file" time="0" />
    <testcase name="bad_manifest_path::test_dir_plus_path" time="0" />
    <testcase name="bad_manifest_path::test_dir_to_nonexistent_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::update_dir_containing_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::update_dir_plus_file" time="0" />
    <testcase name="bad_manifest_path::update_dir_plus_path" time="0" />
    <testcase name="bad_manifest_path::update_dir_to_nonexistent_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::verify_project_dir_containing_cargo_toml" time="0" />
    <testcase name="bad_manifest_path::verify_project_dir_plus_file" time="0" />
    <testcase name="bad_manifest_path::verify_project_dir_plus_path" time="0" />
    <testcase name="bad_manifest_path::verify_project_dir_to_nonexistent_cargo_toml" time="0" />
    <testcase name="bench::bench_all_exclude" time="0" />
    <testcase name="bench::bench_all_virtual_manifest" time="0" />
    <testcase name="bench::bench_all_workspace" time="0" />
    <testcase name="bench::bench_autodiscover_2015" time="0" />
    <testcase name="bench::bench_bench_implicit" time="0" />
    <testcase name="bench::bench_bin_implicit" time="0" />
    <testcase name="bench::bench_dylib" time="0" />
    <testcase name="bench::bench_multiple_targets" time="0" />
    <testcase name="bench::bench_tarname" time="0" />
    <testcase name="bench::bench_twice_with_build_cmd" time="0" />
    <testcase name="bench::bench_virtual_manifest_all_implied" time="0" />
    <testcase name="bench::bench_with_deep_lib_dep" time="0" />
    <testcase name="bench::bench_with_examples" time="0" />
    <testcase name="bench::bench_with_lib_dep" time="0" />
    <testcase name="bench::cargo_bench_failing_test" time="0" />
    <testcase name="bench::cargo_bench_simple" time="0" />
    <testcase name="bench::cargo_bench_twice" time="0" />
    <testcase name="bench::dont_run_examples" time="0" />
    <testcase name="bench::cargo_bench_verbose" time="0" />
    <testcase name="bench::external_bench_explicit" time="0" />
    <testcase name="bench::external_bench_implicit" time="0" />
    <testcase name="bench::json_artifact_includes_executable_for_benchmark" time="0" />
    <testcase name="bench::legacy_bench_name" time="0" />
    <testcase name="bench::lib_bin_same_name" time="0" />
    <testcase name="bench::lib_with_standard_name2" time="0" />
    <testcase name="bench::lib_with_standard_name" time="0" />
    <testcase name="bench::many_similar_names" time="0" />
    <testcase name="bench::pass_through_command_line" time="0" />
    <testcase name="bench::test_a_bench" time="0" />
    <testcase name="bench::test_bench_multiple_packages" time="0" />
    <testcase name="bench::test_bench_no_fail_fast" time="0" />
    <testcase name="bench::test_bench_no_run" time="0" />
    <testcase name="build::bad_cargo_config" time="0" />
    <testcase name="build::bad_platform_specific_dependency" time="0" />
    <testcase name="build::bad_cargo_toml_in_target_dir" time="0" />
    <testcase name="build::all_targets_no_lib" time="0" />
    <testcase name="build::avoid_dev_deps" time="0" />
    <testcase name="build::build_all_exclude" time="0" />
    <testcase name="build::build_all_virtual_manifest" time="0" />
    <testcase name="build::build_all_member_dependency_same_name" time="0" />
    <testcase name="build::build_all_virtual_manifest_implicit_examples" time="0" />
    <testcase name="build::build_all_workspace" time="0" />
    <testcase name="build::build_all_workspace_implicit_examples" time="0" />
    <testcase name="build::build_virtual_manifest_all_implied" time="0" />
    <testcase name="build::build_virtual_manifest_one_project" time="0" />
    <testcase name="build::build_multiple_packages" time="0" />
    <testcase name="build::cargo_build_empty_target" time="0" />
    <testcase name="build::build_with_fake_libc_not_loading" time="0" />
    <testcase name="build::building_a_dependent_crate_witout_bin_should_fail" time="0" />
    <testcase name="build::cargo_compile_manifest_path" time="0" />
    <testcase name="build::cargo_compile_offline_not_try_update" time="0" />
    <testcase name="build::cargo_compile_duplicate_build_targets" time="0" />
    <testcase name="build::build_filter_infer_profile" time="0" />
    <testcase name="build::cargo_compile_with_bin_and_crate_type" time="0" />
    <testcase name="build::cargo_compile_with_bin_and_proc" time="0" />
    <testcase name="build::cargo_compile_incremental" time="0" />
    <testcase name="build::cargo_compile_with_dep_name_mismatch" time="0" />
    <testcase name="build::cargo_compile_with_empty_package_name" time="0" />
    <testcase name="build::cargo_compile_path_with_offline" time="0" />
    <testcase name="build::cargo_compile_with_forbidden_bin_target_name" time="0" />
    <testcase name="build::cargo_compile_with_invalid_bin_target_name" time="0" />
    <testcase name="build::cargo_compile_simple" time="0" />
    <testcase name="build::cargo_compile_with_filename" time="0" />
    <testcase name="build::cargo_compile_with_invalid_lib_target_name" time="0" />
    <testcase name="build::cargo_compile_with_invalid_manifest" time="0" />
    <testcase name="build::cargo_compile_with_invalid_manifest2" time="0" />
    <testcase name="build::cargo_compile_with_invalid_manifest3" time="0" />
    <testcase name="build::cargo_compile_with_invalid_non_numeric_dep_version" time="0" />
    <testcase name="build::cargo_compile_with_invalid_code" time="0" />
    <testcase name="build::cargo_compile_with_invalid_package_name" time="0" />
    <testcase name="build::cargo_compile_with_invalid_code_in_deps" time="0" />
    <testcase name="build::cargo_compile_with_invalid_version" time="0" />
    <testcase name="build::cargo_compile_with_downloaded_dependency_with_offline" time="0" />
    <testcase name="build::cargo_compile_with_nested_deps_inferred" time="0" />
    <testcase name="build::cargo_compile_with_nested_deps_longhand" time="0" />
    <testcase name="build::cargo_compile_with_nested_deps_correct_bin" time="0" />
    <testcase name="build::cargo_compile_with_workspace_excluded" time="0" />
    <testcase name="build::cargo_compile_without_manifest" time="0" />
    <testcase name="build::cargo_compile_with_nested_deps_shorthand" time="0" />
    <testcase name="build::cargo_compile_with_warnings_in_the_root_package" time="0" />
    <testcase name="build::cargo_compile_with_warnings_in_a_dep_package" time="0" />
    <testcase name="build::cargo_fail_with_no_stderr" time="0" />
    <testcase name="build::cargo_platform_specific_dependency_wrong_platform" time="0" />
    <testcase name="build::cargo_default_env_metadata_env_var" time="0" />
    <testcase name="build::cdylib_final_outputs" time="0" />
    <testcase name="build::cdylib_not_lifted" time="0" />
    <testcase name="build::compile_offline_while_transitive_dep_not_cached" time="0" />
    <testcase name="build::cargo_platform_specific_dependency" time="0" />
    <testcase name="build::compile_path_dep_then_change_version" time="0" />
    <testcase name="build::compile_then_delete" time="0" />
    <testcase name="build::compile_offline_without_maxvers_cached" time="0" />
    <testcase name="build::compiler_json_error_format" time="0" />
    <testcase name="build::crate_library_path_env_var" time="0" />
    <testcase name="build::crate_authors_env_vars" time="0" />
    <testcase name="build::cyclic_deps_rejected" time="0" />
    <testcase name="build::dashes_in_crate_name_bad" time="0" />
    <testcase name="build::crate_env_vars" time="0" />
    <testcase name="build::dashes_to_underscores" time="0" />
    <testcase name="build::deletion_causes_failure" time="0" />
    <testcase name="build::dep_no_libs" time="0" />
    <testcase name="build::custom_target_dir_env" time="0" />
    <testcase name="build::dotdir_root" time="0" />
    <testcase name="build::deterministic_cfg_flags" time="0" />
    <testcase name="build::example_as_proc_macro" time="0" />
    <testcase name="build::example_as_dylib" time="0" />
    <testcase name="build::custom_target_dir_line_parameter" time="0" />
    <testcase name="build::example_as_lib" time="0" />
    <testcase name="build::example_as_rlib" time="0" />
    <testcase name="build::explicit_bins_without_paths" time="0" />
    <testcase name="build::example_bin_same_name" time="0" />
    <testcase name="build::explicit_color_config_is_propagated_to_rustc" time="0" />
    <testcase name="build::explicit_examples" time="0" />
    <testcase name="build::filtering" time="0" />
    <testcase name="build::ignore_broken_symlinks" time="0" />
    <testcase name="build::filtering_implicit_bins" time="0" />
    <testcase name="build::filtering_implicit_examples" time="0" />
    <testcase name="build::ignore_dotdirs" time="0" />
    <testcase name="build::ignore_dotfile" time="0" />
    <testcase name="build::freshness_ignores_excluded" time="0" />
    <testcase name="build::ignores_carriage_return_in_lockfile" time="0" />
    <testcase name="build::incompatible_dependencies" time="0" />
    <testcase name="build::incompatible_dependencies_with_multi_semver" time="0" />
    <testcase name="build::implicit_examples" time="0" />
    <testcase name="build::incremental_config" time="0" />
    <testcase name="build::inferred_bin_path" time="0" />
    <testcase name="build::inferred_bins_duplicate_name" time="0" />
    <testcase name="build::inferred_benchmarks" time="0" />
    <testcase name="build::inferred_bins" time="0" />
    <testcase name="build::inferred_examples" time="0" />
    <testcase name="build::invalid_jobs" time="0" />
    <testcase name="build::inferred_main_bin" time="0" />
    <testcase name="build::invalid_spec" time="0" />
    <testcase name="build::incremental_profile" time="0" />
    <testcase name="build::inferred_tests" time="0" />
    <testcase name="build::json_parse_fail" time="0" />
    <testcase name="build::lib_with_standard_name" time="0" />
    <testcase name="build::manifest_with_bom_is_ok" time="0" />
    <testcase name="build::many_crate_types_correct" time="0" />
    <testcase name="build::many_crate_types_old_style_lib_location" time="0" />
    <testcase name="build::legacy_binary_paths_warnings" time="0" />
    <testcase name="build::missing_lib_and_bin" time="0" />
    <testcase name="build::no_bin_in_src_with_lib" time="0" />
    <testcase name="build::message_format_json_forward_stderr" time="0" />
    <testcase name="build::non_existing_binary" time="0" />
    <testcase name="build::non_existing_example" time="0" />
    <testcase name="build::no_warn_about_package_metadata" time="0" />
    <testcase name="build::no_linkable_target" time="0" />
    <testcase name="build::opt_out_of_bin" time="0" />
    <testcase name="build::panic_abort_compiles_with_panic_abort" time="0" />
    <testcase name="build::recompile_space_in_name" time="0" />
    <testcase name="build::lto_build" time="0" />
    <testcase name="build::predictable_filenames" time="0" />
    <testcase name="build::rebuild_preserves_out_dir" time="0" />
    <testcase name="build::release_build_ndebug" time="0" />
    <testcase name="build::run_proper_alias_binary_from_src" time="0" />
    <testcase name="build::run_proper_alias_binary_main_rs" time="0" />
    <testcase name="build::rustc_env_var" time="0" />
    <testcase name="build::rustc_wrapper" time="0" />
    <testcase name="build::run_proper_binary" time="0" />
    <testcase name="build::self_dependency" time="0" />
    <testcase name="build::run_proper_binary_main_rs_as_foo" time="0" />
    <testcase name="build::run_proper_binary_main_rs" time="0" />
    <testcase name="build::simple_staticlib" time="0" />
    <testcase name="build::single_lib" time="0" />
    <testcase name="build::standard_build_no_ndebug" time="0" />
    <testcase name="build::target_edition" time="0" />
    <testcase name="build::same_metadata_different_directory" time="0" />
    <testcase name="build::target_filters_workspace_not_found" time="0" />
    <testcase name="build::staticlib_rlib_and_bin" time="0" />
    <testcase name="build::target_edition_override" time="0" />
    <testcase name="build::targets_selected_all" time="0" />
    <testcase name="build::uplift_dsym_of_bin_on_mac" time="0" />
    <testcase name="build::targets_selected_default" time="0" />
    <testcase name="build::target_filters_workspace" time="0" />
    <testcase name="build::transitive_dependencies_not_available" time="0" />
    <testcase name="build::verbose_build" time="0" />
    <testcase name="build::verbose_release_build" time="0" />
    <testcase name="build::wrong_message_format_option" time="0" />
    <testcase name="build::verbose_release_build_deps" time="0" />
    <testcase name="build::uplift_pdb_of_bin_on_windows" time="0" />
    <testcase name="build::vv_prints_rustc_env_vars" time="0" />
    <testcase name="build_auth::ssh_something_happens" time="0" />
    <testcase name="build_lib::build_with_no_lib" time="0" />
    <testcase name="build_auth::http_auth_offered" time="0">
      <failure type="cargo test" message="running `C:\src\rust-lang\cargo\target\debug\cargo.exe build -v`&#xA;running `C:\src\rust-lang\cargo\target\debug\cargo.exe build`&#xA;thread &apos;build_auth::http_auth_offered&apos; panicked at &apos;&#xA;Expected: execs&#xA;    but: expected to find:&#xA;[UPDATING] git repository `http://127.0.0.1:33960/foo/bar`&#xA;[ERROR] failed to load source for a dependency on `bar`&#xA;&#xA;Caused by:&#xA;  Unable to update http://127.0.0.1:33960/foo/bar&#xA;&#xA;Caused by:&#xA;  failed to clone into: [..]&#xA;&#xA;Caused by:&#xA;  failed to authenticate when downloading repository&#xA;attempted to find username/password via `credential.helper`, but [..]&#xA;&#xA;Caused by:&#xA;&#xA;&#xA;did not find in output:&#xA;    Updating git repository `http://127.0.0.1:33960/foo/bar`&#xA;error: failed to load source for a dependency on `bar`&#xA;&#xA;Caused by:&#xA;  Unable to update http://127.0.0.1:33960/foo/bar&#xA;&#xA;Caused by:&#xA;  failed to clone into: C:\src\rust-lang\cargo\target\cit\t263\home\.cargo\git\db\bar-8cbd35f4772f62e3&#xA;&#xA;Caused by:&#xA;  failed to authenticate when downloading repository&#xA;attempted to find username/password via git&apos;s `credential.helper` support, but failed&#xA;&#xA;Caused by:&#xA;  failed to acquire username/password from local configuration&#xA;&apos;, tests\testsuite\support\mod.rs:794:13&#xA;" />
    </testcase>
    <testcase name="build_lib::build_lib_only" time="0" />
    <testcase name="build_auth::https_something_happens" time="0" />
    <testcase name="build_plan::cargo_build_plan_build_script" time="0" />
    <testcase name="build_lib::build_with_relative_cargo_home_path" time="0" />
    <testcase name="build_plan::cargo_build_plan_simple" time="0" />
    <testcase name="build_plan::build_plan_with_dev_dep" time="0" />
    <testcase name="build_plan::cargo_build_plan_single_dep" time="0" />
    <testcase name="build_script::adding_an_override_invalidates" time="0" />
    <testcase name="build_script::assume_build_script_when_build_rs_present" time="0" />
    <testcase name="build_script::build_script_only" time="0" />
    <testcase name="build_script::build_deps_not_for_normal" time="0" />
    <testcase name="build_script::build_cmd_with_a_build_cmd" time="0" />
    <testcase name="build_script::build_deps_simple" time="0" />
    <testcase name="build_script::build_script_with_lto" time="0" />
    <testcase name="build_script::cfg_feedback" time="0" />
    <testcase name="build_script::cfg_env_vars_available" time="0" />
    <testcase name="build_script::build_script_with_dynamic_native_dependency" time="0" />
    <testcase name="build_script::cfg_override" time="0" />
    <testcase name="build_script::cfg_override_test" time="0" />
    <testcase name="build_script::cfg_test" time="0" />
    <testcase name="build_script::custom_build_env_var_rustc_linker" time="0" />
    <testcase name="build_script::changing_an_override_invalidates" time="0" />
    <testcase name="build_script::cfg_doc" time="0" />
    <testcase name="build_script::custom_build_script_failed" time="0" />
    <testcase name="build_script::custom_build_script_wrong_rustc_flags" time="0" />
    <testcase name="build_script::custom_build_env_vars" time="0" />
    <testcase name="build_script::cfg_override_doc" time="0" />
    <testcase name="build_script::custom_target_dir" time="0" />
    <testcase name="build_script::diamond_passes_args_only_once" time="0" />
    <testcase name="build_script::deterministic_rustc_dependency_flags" time="0" />
    <testcase name="build_script::env_build" time="0" />
    <testcase name="build_script::doctest_receives_build_link_args" time="0" />
    <testcase name="build_script::fresh_builds_possible_with_link_libs" time="0" />
    <testcase name="build_script::fresh_builds_possible_with_multiple_metadata_overrides" time="0" />
    <testcase name="build_script::env_test" time="0" />
    <testcase name="build_script::links_duplicates" time="0" />
    <testcase name="build_script::links_duplicates_deep_dependency" time="0" />
    <testcase name="build_script::links_duplicates_with_cycle" time="0" />
    <testcase name="build_script::flags_go_into_tests" time="0" />
    <testcase name="build_script::if_build_set_to_false_dont_treat_build_rs_as_build_script" time="0" />
    <testcase name="build_script::links_no_build_cmd" time="0" />
    <testcase name="build_script::env_doc" time="0" />
    <testcase name="build_script::links_with_dots" time="0" />
    <testcase name="build_script::links_passes_env_vars" time="0" />
    <testcase name="build_script::non_utf8_output" time="0" />
    <testcase name="build_script::only_rerun_build_script" time="0" />
    <testcase name="build_script::output_separate_lines" time="0" />
    <testcase name="build_script::optional_build_dep_and_required_normal_dep" time="0" />
    <testcase name="build_script::out_dir_is_preserved" time="0" />
    <testcase name="build_script::optional_build_script_dep" time="0" />
    <testcase name="build_script::output_separate_lines_new" time="0" />
    <testcase name="build_script::output_shows_on_vv" time="0" />
    <testcase name="build_script::overrides_and_links" time="0" />
    <testcase name="build_script::please_respect_the_dag" time="0" />
    <testcase name="build_script::profile_debug_0" time="0" />
    <testcase name="build_script::profile_and_opt_level_set_correctly" time="0" />
    <testcase name="build_script::propagation_of_l_flags" time="0" />
    <testcase name="build_script::panic_abort_with_build_scripts" time="0" />
    <testcase name="build_script::propagation_of_l_flags_new" time="0" />
    <testcase name="build_script::rebuild_continues_to_pass_env_vars" time="0" />
    <testcase name="build_script::rename_with_link_search_path_cross" time="0" />
    <testcase name="build_script::release_with_build_script" time="0" />
    <testcase name="build_script::rustc_and_rustdoc_set_correctly" time="0" />
    <testcase name="build_script::shared_dep_with_a_build_script" time="0" />
    <testcase name="build_script::rename_with_link_search_path" time="0" />
    <testcase name="build_script::rebuild_only_on_explicit_paths" time="0" />
    <testcase name="build_script::test_dev_dep_build_script" time="0" />
    <testcase name="build_script::switch_features_rerun" time="0" />
    <testcase name="build_script::test_a_lib_with_a_build_command" time="0" />
    <testcase name="build_script::test_duplicate_deps" time="0" />
    <testcase name="build_script::unused_overrides" time="0" />
    <testcase name="build_script::warnings_emitted" time="0" />
    <testcase name="build_script::transitive_dep_host" time="0" />
    <testcase name="build_script::warnings_hidden_for_upstream" time="0" />
    <testcase name="build_script::warnings_printed_on_vv" time="0" />
    <testcase name="cargo_alias_config::alias_cannot_shadow_builtin_command" time="0" />
    <testcase name="build_script_env::rerun_if_env_changes" time="0" />
    <testcase name="cargo_alias_config::alias_incorrect_config_type" time="0" />
    <testcase name="build_script::testing_and_such" time="0" />
    <testcase name="cargo_alias_config::alias_config" time="0" />
    <testcase name="cargo_alias_config::alias_list_test" time="0" />
    <testcase name="cargo_alias_config::alias_override_builtin_alias" time="0" />
    <testcase name="cargo_alias_config::alias_with_flags_config" time="0" />
    <testcase name="build_script_env::rerun_if_env_or_file_changes" time="0" />
    <testcase name="cargo_command::cargo_help" time="0" />
    <testcase name="cargo_alias_config::recursive_alias" time="0" />
    <testcase name="cargo_alias_config::builtin_alias_takes_options" time="0" />
    <testcase name="cargo_command::displays_subcommand_on_error" time="0" />
    <testcase name="cargo_command::explain" time="0" />
    <testcase name="cargo_command::cargo_subcommand_args" time="0" />
    <testcase name="cargo_command::find_closest_dont_correct_nonsense" time="0" />
    <testcase name="cargo_command::cargo_subcommand_env" time="0" />
    <testcase name="cargo_command::list_command_looks_at_path" time="0" />
    <testcase name="cargo_command::list_commands_with_descriptions" time="0" />
    <testcase name="cargo_command::override_cargo_home" time="0" />
    <testcase name="cargo_command::z_flags_help" time="0" />
    <testcase name="cargo_command::cargo_help_external_subcommand" time="0" />
    <testcase name="cargo_features::feature_required" time="0" />
    <testcase name="cargo_features::cant_publish" time="0" />
    <testcase name="cargo_features::nightly_feature_requires_nightly" time="0" />
    <testcase name="cargo_features::nightly_feature_requires_nightly_in_dep" time="0" />
    <testcase name="cargo_command::find_closest_biuld_to_build" time="0" />
    <testcase name="cargo_features::unknown_feature" time="0" />
    <testcase name="cargo_features::stable_feature_warns" time="0" />
    <testcase name="cfg::bad_target_spec" time="0" />
    <testcase name="cfg::bad_target_spec2" time="0" />
    <testcase name="cargo_features::z_flags_rejected" time="0" />
    <testcase name="cfg::cfg_expr" time="0" />
    <testcase name="cfg::cfg_expr_bad" time="0" />
    <testcase name="cfg::cfg_matches" time="0" />
    <testcase name="cargo_features::publish_allowed" time="0" />
    <testcase name="cfg::cfg_syntax" time="0" />
    <testcase name="cfg::cfg_syntax_bad" time="0" />
    <testcase name="cfg::any_ok" time="0" />
    <testcase name="cfg::cfg_easy" time="0" />
    <testcase name="cfg::dont_include" time="0" />
    <testcase name="cfg::multiple_match_ok" time="0" />
    <testcase name="cfg::ignore_version_from_other_platform" time="0" />
    <testcase name="check::check_all" time="0" />
    <testcase name="check::build_check" time="0" />
    <testcase name="cfg::works_through_the_registry" time="0" />
    <testcase name="check::check_fail" time="0" />
    <testcase name="check::check_build" time="0" />
    <testcase name="check::check_success" time="0" />
    <testcase name="check::check_unit_test_profile" time="0" />
    <testcase name="check::check_virtual_all_implied" time="0" />
    <testcase name="check::does_not_use_empty_rustc_wrapper" time="0" />
    <testcase name="check::custom_derive" time="0" />
    <testcase name="check::check_artifacts" time="0" />
    <testcase name="check::check_filters" time="0" />
    <testcase name="check::dylib_check_preserves_build_cache" time="0" />
    <testcase name="check::issue_3418" time="0" />
    <testcase name="check::issue_3419" time="0" />
    <testcase name="check::rustc_check" time="0" />
    <testcase name="check::proc_macro" time="0" />
    <testcase name="check::rustc_check_err" time="0" />
    <testcase name="check::short_message_format" time="0" />
    <testcase name="check::targets_selected_all" time="0" />
    <testcase name="check::error_from_deep_recursion" time="0" />
    <testcase name="check::targets_selected_default" time="0" />
    <testcase name="clean::cargo_clean_simple" time="0" />
    <testcase name="clean::clean_multiple_packages" time="0" />
    <testcase name="clean::build_script" time="0" />
    <testcase name="clean::clean_git" time="0" />
    <testcase name="clean::different_dir" time="0" />
    <testcase name="clean::clean_verbose" time="0" />
    <testcase name="clean::clean_release" time="0" />
    <testcase name="collisions::collision_example" time="0" />
    <testcase name="clean::registry" time="0" />
    <testcase name="collisions::collision_dylib" time="0" />
    <testcase name="clean::clean_doc" time="0" />
    <testcase name="collisions::collision_export" time="0" />
    <testcase name="concurrent::concurrent_installs" time="0" />
    <testcase name="concurrent::debug_release_ok" time="0" />
    <testcase name="concurrent::multiple_installs" time="0" />
    <testcase name="concurrent::git_same_repo_different_tags" time="0" />
    <testcase name="concurrent::git_same_branch_different_revs" time="0" />
    <testcase name="concurrent::one_install_should_be_bad" time="0" />
    <testcase name="config::config_bad_toml" time="0" />
    <testcase name="config::config_deserialize_any" time="0" />
    <testcase name="config::config_get_integers" time="0" />
    <testcase name="config::config_get_list" time="0" />
    <testcase name="config::config_get_option" time="0" />
    <testcase name="config::config_get_other_types" time="0" />
    <testcase name="config::config_load_toml_profile" time="0" />
    <testcase name="config::config_relative_path" time="0" />
    <testcase name="config::config_toml_errors" time="0" />
    <testcase name="config::config_unused_fields" time="0" />
    <testcase name="config::get_config" time="0" />
    <testcase name="config::get_errors" time="0" />
    <testcase name="concurrent::same_project" time="0" />
    <testcase name="config::load_nested" time="0" />
    <testcase name="concurrent::no_deadlock_with_git_dependencies" time="0" />
    <testcase name="concurrent::multiple_registry_fetches" time="0" />
    <testcase name="cross_compile::build_deps_for_the_right_arch" time="0" />
    <testcase name="cross_compile::build_script_needed_for_host_and_target" time="0" />
    <testcase name="cross_compile::build_script_only_host" time="0" />
    <testcase name="cross_compile::build_script_with_platform_specific_dependencies" time="0" />
    <testcase name="cross_compile::cross_test_dylib" time="0" />
    <testcase name="cross_compile::cross_tests" time="0" />
    <testcase name="cross_compile::cross_with_a_build_script" time="0" />
    <testcase name="cross_compile::linker_and_ar" time="0" />
    <testcase name="cross_compile::no_cross_doctests" time="0" />
    <testcase name="cross_compile::platform_specific_dependencies_do_not_leak" time="0" />
    <testcase name="cross_compile::platform_specific_variables_reflected_in_build_scripts" time="0" />
    <testcase name="cross_compile::plugin_build_script_right_arch" time="0" />
    <testcase name="cross_compile::plugin_deps" time="0" />
    <testcase name="cross_compile::plugin_to_the_max" time="0" />
    <testcase name="cross_compile::plugin_with_extra_dylib_dep" time="0" />
    <testcase name="cross_compile::simple_cargo_run" time="0" />
    <testcase name="cross_compile::simple_cross" time="0" />
    <testcase name="cross_compile::simple_cross_config" time="0" />
    <testcase name="cross_compile::simple_deps" time="0" />
    <testcase name="cross_publish::publish_with_target" time="0" />
    <testcase name="cross_publish::simple_cross_package" time="0" />
    <testcase name="custom_target::custom_target_dependency" time="0" />
    <testcase name="custom_target::custom_target_minimal" time="0" />
    <testcase name="config::read_env_vars_for_config" time="0" />
    <testcase name="dep_info::build_dep_info" time="0" />
    <testcase name="death::ctrl_c_kills_everyone" time="0" />
    <testcase name="corrupt_git::deleting_database_files" time="0" />
    <testcase name="dep_info::build_dep_info_lib" time="0" />
    <testcase name="dep_info::build_dep_info_dylib" time="0" />
    <testcase name="corrupt_git::deleting_checkout_files" time="0" />
    <testcase name="directory::bad_file_checksum" time="0" />
    <testcase name="dep_info::build_dep_info_rlib" time="0" />
    <testcase name="dep_info::no_rewrite_if_no_change" time="0" />
    <testcase name="directory::git_override_requires_lockfile" time="0" />
    <testcase name="directory::crates_io_then_bad_checksum" time="0" />
    <testcase name="directory::git_lock_file_doesnt_change" time="0" />
    <testcase name="directory::install_without_feature_dep" time="0" />
    <testcase name="directory::not_there" time="0" />
    <testcase name="directory::crates_io_then_directory" time="0" />
    <testcase name="directory::multiple" time="0" />
    <testcase name="directory::only_dot_files_ok" time="0" />
    <testcase name="directory::random_files_ok" time="0" />
    <testcase name="directory::simple_install_fail" time="0" />
    <testcase name="directory::simple" time="0" />
    <testcase name="directory::version_missing" time="0" />
    <testcase name="doc::doc_all_member_dependency_same_name" time="0" />
    <testcase name="directory::simple_install" time="0" />
    <testcase name="doc::doc_cap_lints" time="0" />
    <testcase name="directory::workspace_different_locations" time="0" />
    <testcase name="doc::doc_all_virtual_manifest" time="0" />
    <testcase name="doc::doc_edition" time="0" />
    <testcase name="doc::doc_all_workspace" time="0" />
    <testcase name="doc::doc_lib_bin_same_name_documents_bins_when_requested" time="0" />
    <testcase name="doc::doc_dash_p" time="0" />
    <testcase name="doc::doc_deps" time="0" />
    <testcase name="doc::doc_message_format" time="0" />
    <testcase name="doc::doc_lib_bin_same_name_documents_lib" time="0" />
    <testcase name="doc::doc_lib_bin_same_name_documents_lib_when_requested" time="0" />
    <testcase name="doc::doc_multiple_targets_same_name_bin" time="0" />
    <testcase name="doc::doc_multiple_targets_same_name_lib" time="0" />
    <testcase name="doc::doc_lib_bin_same_name_documents_named_bin_when_requested" time="0" />
    <testcase name="doc::doc_multiple_deps" time="0" />
    <testcase name="doc::doc_no_libs" time="0" />
    <testcase name="doc::doc_multiple_targets_same_name" time="0" />
    <testcase name="doc::doc_multiple_targets_same_name_undoced" time="0" />
    <testcase name="doc::doc_no_deps" time="0" />
    <testcase name="doc::doc_private_items" time="0" />
    <testcase name="doc::doc_private_ws" time="0" />
    <testcase name="doc::doc_release" time="0" />
    <testcase name="doc::doc_target_edition" time="0" />
    <testcase name="doc::doc_target" time="0" />
    <testcase name="doc::doc_only_bin" time="0" />
    <testcase name="doc::doc_same_name" time="0" />
    <testcase name="doc::doc_twice" time="0" />
    <testcase name="doc::doc_virtual_manifest_all_implied" time="0" />
    <testcase name="doc::doc_workspace_open_help_message" time="0" />
    <testcase name="doc::document_only_lib" time="0" />
    <testcase name="doc::no_document_build_deps" time="0" />
    <testcase name="doc::plugins_no_use_target" time="0" />
    <testcase name="doc::features" time="0" />
    <testcase name="doc::short_message_format" time="0" />
    <testcase name="doc::issue_5345" time="0" />
    <testcase name="doc::output_not_captured" time="0" />
    <testcase name="doc::rerun_when_dir_removed" time="0" />
    <testcase name="edition::edition_works_for_build_script" time="0" />
    <testcase name="doc::simple" time="0" />
    <testcase name="features::activating_feature_activates_dep" time="0" />
    <testcase name="doc::target_specific_not_documented" time="0" />
    <testcase name="features::all_features_all_crates" time="0" />
    <testcase name="features::cyclic_feature" time="0" />
    <testcase name="features::all_features_flag_enables_all_features" time="0" />
    <testcase name="features::cyclic_feature2" time="0" />
    <testcase name="doc::target_specific_documented" time="0" />
    <testcase name="features::combining_features_and_package" time="0" />
    <testcase name="features::everything_in_the_lockfile" time="0" />
    <testcase name="features::empty_features" time="0" />
    <testcase name="features::default_feature_pulled_in" time="0" />
    <testcase name="features::invalid1" time="0" />
    <testcase name="features::dep_feature_in_cmd_line" time="0" />
    <testcase name="features::invalid2" time="0" />
    <testcase name="features::invalid3" time="0" />
    <testcase name="features::groups_on_groups_on_groups" time="0" />
    <testcase name="features::invalid4" time="0" />
    <testcase name="features::invalid5" time="0" />
    <testcase name="features::invalid6" time="0" />
    <testcase name="features::invalid7" time="0" />
    <testcase name="features::invalid8" time="0" />
    <testcase name="features::invalid10" time="0" />
    <testcase name="features::feature_off_dylib" time="0" />
    <testcase name="features::invalid9" time="0" />
    <testcase name="features::many_cli_features" time="0" />
    <testcase name="features::many_cli_features_comma_and_space_delimited" time="0" />
    <testcase name="features::namespaced_implicit_non_optional" time="0" />
    <testcase name="features::many_cli_features_comma_delimited" time="0" />
    <testcase name="features::namespaced_invalid_dependency" time="0" />
    <testcase name="features::namespaced_invalid_feature" time="0" />
    <testcase name="features::namespaced_non_optional_dependency" time="0" />
    <testcase name="features::namespaced_shadowed_dep" time="0" />
    <testcase name="features::namespaced_shadowed_non_optional" time="0" />
    <testcase name="features::namespaced_implicit_feature" time="0" />
    <testcase name="features::many_features_no_rebuilds" time="0" />
    <testcase name="features::no_transitive_dep_feature_requirement" time="0" />
    <testcase name="features::namespaced_same_name" time="0" />
    <testcase name="features::optional_and_dev_dep" time="0" />
    <testcase name="features::no_rebuild_when_frobbing_default_feature" time="0" />
    <testcase name="features::no_feature_doesnt_build" time="0" />
    <testcase name="features::only_dep_is_optional" time="0" />
    <testcase name="features::transitive_features" time="0" />
    <testcase name="fetch::fetch_all_platform_dependencies_when_no_target_is_given" time="0" />
    <testcase name="fetch::fetch_platform_specific_dependencies" time="0" />
    <testcase name="fetch::no_deps" time="0" />
    <testcase name="features::union_features" time="0" />
    <testcase name="fix::both_edition_migrate_flags" time="0" />
    <testcase name="features::unions_work_with_no_default_features" time="0" />
    <testcase name="features::warn_if_default_features" time="0" />
    <testcase name="fix::does_not_crash_with_rustc_wrapper" time="0" />
    <testcase name="fix::do_not_fix_non_relevant_deps" time="0" />
    <testcase name="fix::do_not_fix_broken_builds" time="0" />
    <testcase name="fix::does_not_warn_about_clean_working_directory" time="0" />
    <testcase name="fix::does_not_warn_about_dirty_ignored_files" time="0" />
    <testcase name="fix::fix_all_targets_by_default" time="0" />
    <testcase name="fix::doesnt_rebuild_dependencies" time="0" />
    <testcase name="fix::broken_fixes_backed_out" time="0" />
    <testcase name="fix::fix_broken_if_requested" time="0" />
    <testcase name="fix::fix_deny_warnings" time="0" />
    <testcase name="fix::fix_idioms" time="0" />
    <testcase name="fix::fix_overlapping" time="0" />
    <testcase name="fix::fix_to_broken_code" time="0" />
    <testcase name="fix::fix_deny_warnings_but_not_others" time="0" />
    <testcase name="fix::fix_two_files" time="0" />
    <testcase name="fix::fix_path_deps" time="0" />
    <testcase name="fix::fix_with_common" time="0" />
    <testcase name="fix::fix_features" time="0" />
    <testcase name="fix::fixes_extra_mut" time="0" />
    <testcase name="fix::local_paths" time="0" />
    <testcase name="fix::fixes_two_missing_ampersands" time="0" />
    <testcase name="fix::idioms_2015_ok" time="0" />
    <testcase name="fix::prepare_for_2018" time="0" />
    <testcase name="fix::no_changes_necessary" time="0" />
    <testcase name="fix::prepare_for_and_enable" time="0" />
    <testcase name="fix::only_warn_for_relevant_crates" time="0" />
    <testcase name="fix::preserve_line_endings" time="0" />
    <testcase name="fix::shows_warnings" time="0" />
    <testcase name="fix::specify_rustflags" time="0" />
    <testcase name="fix::shows_warnings_on_second_run_without_changes" time="0" />
    <testcase name="fix::tricky" time="0" />
    <testcase name="fix::upgrade_extern_crate" time="0" />
    <testcase name="fix::warns_about_dirty_working_directory" time="0" />
    <testcase name="fix::fixes_missing_ampersand" time="0" />
    <testcase name="fix::warns_about_staged_working_directory" time="0" />
    <testcase name="fix::shows_warnings_on_second_run_without_changes_on_multiple_targets" time="0" />
    <testcase name="fix::warns_if_no_vcs_detected" time="0" />
    <testcase name="freshness::change_panic_mode" time="0" />
    <testcase name="freshness::bust_patched_dep" time="0" />
    <testcase name="freshness::changing_bin_features_caches_targets" time="0" />
    <testcase name="freshness::changing_lib_features_caches_targets" time="0" />
    <testcase name="freshness::changing_rustflags_is_cached" time="0" />
    <testcase name="freshness::changing_profiles_caches_targets" time="0" />
    <testcase name="freshness::dont_rebuild_based_on_plugins" time="0" />
    <testcase name="freshness::fingerprint_cleaner_does_not_rebuild" time="0" />
    <testcase name="freshness::modifying_and_moving" time="0" />
    <testcase name="freshness::no_rebuild_if_build_artifacts_move_backwards_in_time" time="0" />
    <testcase name="freshness::changing_bin_paths_common_target_features_caches_targets" time="0" />
    <testcase name="freshness::no_rebuild_when_rename_dir" time="0" />
    <testcase name="freshness::modify_only_some_files" time="0" />
    <testcase name="freshness::no_rebuild_transitive_target_deps" time="0" />
    <testcase name="freshness::path_dev_dep_registry_updates" time="0" />
    <testcase name="freshness::rebuild_if_build_artifacts_move_forward_in_time" time="0" />
    <testcase name="freshness::rebuild_if_environment_changes" time="0" />
    <testcase name="freshness::rebuild_sub_package_then_while_package" time="0" />
    <testcase name="freshness::rebuild_on_mid_build_file_modification" time="0" />
    <testcase name="freshness::rerun_if_changed_in_dep" time="0" />
    <testcase name="freshness::reuse_panic_build_dep_test" time="0" />
    <testcase name="freshness::reuse_panic_pm" time="0" />
    <testcase name="freshness::reuse_shared_build_dep" time="0" />
    <testcase name="freshness::rebuild_tests_if_lib_changes" time="0" />
    <testcase name="freshness::reuse_workspace_lib" time="0" />
    <testcase name="freshness::same_build_dir_cached_packages" time="0" />
    <testcase name="generate_lockfile::adding_and_removing_packages" time="0" />
    <testcase name="generate_lockfile::cargo_update_generate_lockfile" time="0" />
    <testcase name="generate_lockfile::duplicate_entries_in_lockfile" time="0" />
    <testcase name="generate_lockfile::preserve_line_endings_issue_2076" time="0" />
    <testcase name="freshness::unused_optional_dep" time="0" />
    <testcase name="generate_lockfile::no_index_update" time="0" />
    <testcase name="git::cargo_compile_forbird_git_httpsrepo_offline" time="0" />
    <testcase name="freshness::simple_deps_cleaner_does_not_rebuild" time="0" />
    <testcase name="generate_lockfile::preserve_metadata" time="0" />
    <testcase name="git::add_a_git_dep" time="0" />
    <testcase name="git::cargo_compile_git_dep_branch" time="0" />
    <testcase name="git::cargo_compile_git_dep_tag" time="0" />
    <testcase name="git::cargo_compile_simple_git_dep" time="0" />
    <testcase name="git::cargo_compile_with_malformed_nested_paths" time="0" />
    <testcase name="git::cargo_compile_with_meta_package" time="0" />
    <testcase name="git::cargo_compile_with_short_ssh_git" time="0" />
    <testcase name="git::dep_with_bad_submodule" time="0" />
    <testcase name="git::denied_lints_are_allowed" time="0" />
    <testcase name="git::cargo_compile_with_nested_paths" time="0" />
    <testcase name="git::cargo_compile_offline_with_cached_git_dep" time="0" />
    <testcase name="git::dep_with_submodule" time="0" />
    <testcase name="git::dev_deps_with_testing" time="0" />
    <testcase name="git::doctest_same_name" time="0" />
    <testcase name="git::dont_require_submodules_are_checked_out" time="0" />
    <testcase name="git::failed_submodule_checkout" time="0" />
    <testcase name="git::fetch_downloads" time="0" />
    <testcase name="git::dep_with_changed_submodule" time="0" />
    <testcase name="git::git_name_not_always_needed" time="0" />
    <testcase name="git::invalid_git_dependency_manifest" time="0" />
    <testcase name="git::git_build_cmd_freshness" time="0" />
    <testcase name="git::git_dep_build_cmd" time="0" />
    <testcase name="git::lints_are_suppressed" time="0" />
    <testcase name="git::git_repo_changing_no_rebuild" time="0" />
    <testcase name="git::switch_deps_does_not_update_transitive" time="0" />
    <testcase name="git::stale_cached_version" time="0" />
    <testcase name="git::recompilation" time="0" />
    <testcase name="git::switch_sources" time="0" />
    <testcase name="git::templatedir_doesnt_cause_problems" time="0" />
    <testcase name="git::two_at_rev_instead_of_tag" time="0" />
    <testcase name="git::update_one_dep_in_repo_with_many_deps" time="0" />
    <testcase name="git::two_deps_only_update_one" time="0" />
    <testcase name="git::two_revs_same_deps" time="0" />
    <testcase name="git::update_ambiguous" time="0" />
    <testcase name="git::update_one_source_updates_all_packages_in_that_git_source" time="0" />
    <testcase name="git::warnings_in_git_dep" time="0" />
    <testcase name="init::bin_already_exists_explicit" time="0" />
    <testcase name="init::auto_git" time="0" />
    <testcase name="init::bin_already_exists_explicit_nosrc" time="0" />
    <testcase name="init::bin_already_exists_implicit" time="0" />
    <testcase name="init::bin_already_exists_implicit_namenosrc" time="0" />
    <testcase name="init::bin_already_exists_implicit_namesrc" time="0" />
    <testcase name="init::both_lib_and_bin" time="0" />
    <testcase name="init::bin_already_exists_implicit_nosrc" time="0" />
    <testcase name="git::use_the_cli" time="0" />
    <testcase name="init::cargo_lock_gitignored_if_lib1" time="0" />
    <testcase name="init::cargo_lock_gitignored_if_lib2" time="0" />
    <testcase name="init::cargo_lock_not_gitignored_if_bin1" time="0" />
    <testcase name="init::confused_by_multiple_lib_files" time="0" />
    <testcase name="init::cargo_lock_not_gitignored_if_bin2" time="0" />
    <testcase name="init::git_autodetect" time="0" />
    <testcase name="init::gitignore_added_newline_in_existing" time="0" />
    <testcase name="init::gitignore_appended_not_replaced" time="0" />
    <testcase name="init::gitignore_no_newline_in_new" time="0" />
    <testcase name="init::invalid_dir_name" time="0" />
    <testcase name="init::lib_already_exists_nosrc" time="0" />
    <testcase name="init::lib_already_exists_src" time="0" />
    <testcase name="init::mercurial_added_newline_in_existing" time="0" />
    <testcase name="init::mercurial_autodetect" time="0" />
    <testcase name="init::mercurial_no_newline_in_new" time="0" />
    <testcase name="init::reserved_name" time="0" />
    <testcase name="init::multibin_project_name_clash" time="0" />
    <testcase name="init::simple_git" time="0" />
    <testcase name="init::simple_git_ignore_exists" time="0" />
    <testcase name="init::unknown_flags" time="0" />
    <testcase name="init::with_argument" time="0" />
    <testcase name="init::simple_lib" time="0" />
    <testcase name="init::simple_bin" time="0" />
    <testcase name="install::bad_paths" time="0" />
    <testcase name="install::bad_version" time="0" />
    <testcase name="git::update_with_shared_deps" time="0" />
    <testcase name="install::compile_failure" time="0" />
    <testcase name="install::do_not_rebuilds_on_local_install" time="0" />
    <testcase name="install::dev_dependencies_no_check" time="0" />
    <testcase name="install::dev_dependencies_lock_file_untouched" time="0" />
    <testcase name="install::custom_target_dir_for_git_source" time="0" />
    <testcase name="install::examples" time="0" />
    <testcase name="install::install_empty_argument" time="0" />
    <testcase name="install::git_repo" time="0" />
    <testcase name="install::git_with_lockfile" time="0" />
    <testcase name="install::git_repo_replace" time="0" />
    <testcase name="install::install_force" time="0" />
    <testcase name="install::install_force_bin" time="0" />
    <testcase name="install::install_global_cargo_config" time="0" />
    <testcase name="install::install_force_partial_overlap" time="0" />
    <testcase name="install::install_ignores_local_cargo_config" time="0" />
    <testcase name="install::install_target_foreign" time="0" />
    <testcase name="install::install_path" time="0" />
    <testcase name="install::install_twice" time="0" />
    <testcase name="install::install_respects_lock_file" time="0" />
    <testcase name="install::install_target_native" time="0" />
    <testcase name="install::installs_from_cwd_with_2018_warnings" time="0" />
    <testcase name="install::installs_from_cwd_by_default" time="0" />
    <testcase name="install::installs_beta_version_by_explicit_name_from_git" time="0" />
    <testcase name="install::legacy_version_requirement" time="0" />
    <testcase name="install::install_location_precedence" time="0" />
    <testcase name="install::missing" time="0" />
    <testcase name="install::list_error" time="0" />
    <testcase name="install::lock_file_path_deps_ok" time="0" />
    <testcase name="install::multiple_crates_auto_binaries" time="0" />
    <testcase name="install::multiple_crates_error" time="0" />
    <testcase name="install::list" time="0" />
    <testcase name="install::multiple_crates_auto_examples" time="0" />
    <testcase name="install::no_binaries" time="0" />
    <testcase name="install::no_binaries_or_examples" time="0" />
    <testcase name="install::not_both_vers_and_version" time="0" />
    <testcase name="install::multiple_crates_git_all" time="0" />
    <testcase name="install::multiple_crates_select" time="0" />
    <testcase name="install::pick_max_version" time="0" />
    <testcase name="install::multiple_pkgs" time="0" />
    <testcase name="install::q_silences_warnings" time="0" />
    <testcase name="install::readonly_dir" time="0" />
    <testcase name="install::test_install_git_cannot_be_a_base_url" time="0" />
    <testcase name="install::simple" time="0" />
    <testcase name="install::reports_unsuccessful_subcommand_result" time="0" />
    <testcase name="install::uninstall_cwd_no_project" time="0" />
    <testcase name="install::uninstall_cwd_not_installed" time="0" />
    <testcase name="install::subcommand_works_out_of_the_box" time="0" />
    <testcase name="install::uninstall_multiple_and_specifying_bin" time="0" />
    <testcase name="install::uninstall_cwd" time="0" />
    <testcase name="install::uninstall_pkg_does_not_exist" time="0" />
    <testcase name="install::uninstall_bin_does_not_exist" time="0" />
    <testcase name="install::uninstall_piecemeal" time="0" />
    <testcase name="install::uninstall_multiple_and_some_pkg_does_not_exist" time="0" />
    <testcase name="install::vers_precise" time="0" />
    <testcase name="jobserver::jobserver_and_j" time="0" />
    <testcase name="install::use_path_workspace" time="0" />
    <testcase name="jobserver::makes_jobserver_used" time="0" />
    <testcase name="install::workspace_uses_workspace_target_dir" time="0" />
    <testcase name="install::version_too" time="0" />
    <testcase name="list_targets::bench_list_targets" time="0" />
    <testcase name="list_targets::build_list_targets" time="0" />
    <testcase name="list_targets::doc_list_targets" time="0" />
    <testcase name="list_targets::check_list_targets" time="0" />
    <testcase name="list_targets::install_list_targets" time="0" />
    <testcase name="list_targets::run_list_targets" time="0" />
    <testcase name="jobserver::jobserver_exists" time="0" />
    <testcase name="list_targets::fix_list_targets" time="0" />
    <testcase name="list_targets::rustc_list_targets" time="0" />
    <testcase name="list_targets::rustdoc_list_targets" time="0" />
    <testcase name="list_targets::test_list_targets" time="0" />
    <testcase name="local_registry::invalid_dir_bad" time="0" />
    <testcase name="local_registry::different_directory_replacing_the_registry_is_bad" time="0" />
    <testcase name="local_registry::interdependent" time="0" />
    <testcase name="local_registry::multiple_names" time="0" />
    <testcase name="local_registry::crates_io_registry_url_is_optional" time="0" />
    <testcase name="local_registry::multiple_versions" time="0" />
    <testcase name="local_registry::path_dep_rewritten" time="0" />
    <testcase name="lockfile_compat::current_lockfile_format" time="0" />
    <testcase name="lockfile_compat::listed_checksum_bad_if_we_cannot_compute" time="0" />
    <testcase name="lockfile_compat::locked_correct_error" time="0" />
    <testcase name="local_registry::simple" time="0" />
    <testcase name="lockfile_compat::frozen_flag_preserves_old_lockfile" time="0" />
    <testcase name="lockfile_compat::unlisted_checksum_is_bad_if_we_calculate" time="0" />
    <testcase name="lockfile_compat::lockfile_without_root" time="0" />
    <testcase name="lockfile_compat::totally_wild_checksums_works" time="0" />
    <testcase name="lockfile_compat::wrong_checksum_is_an_error" time="0" />
    <testcase name="login::login_with_new_credentials" time="0" />
    <testcase name="lockfile_compat::oldest_lockfile_still_works" time="0" />
    <testcase name="login::login_with_old_and_new_credentials" time="0" />
    <testcase name="login::new_credentials_is_used_instead_old" time="0" />
    <testcase name="login::login_with_old_credentials" time="0" />
    <testcase name="login::login_without_credentials" time="0" />
    <testcase name="member_errors::toml_deserialize_manifest_error" time="0" />
    <testcase name="member_errors::member_manifest_path_io_error" time="0" />
    <testcase name="login::registry_credentials" time="0" />
    <testcase name="metabuild::metabuild_error_both" time="0" />
    <testcase name="metabuild::metabuild_build_plan" time="0" />
    <testcase name="metabuild::metabuild_basic" time="0" />
    <testcase name="member_errors::member_manifest_version_error" time="0" />
    <testcase name="metabuild::metabuild_gated" time="0" />
    <testcase name="metabuild::metabuild_failed_build_json" time="0" />
    <testcase name="metabuild::metabuild_external_dependency" time="0" />
    <testcase name="metabuild::metabuild_fresh" time="0" />
    <testcase name="metabuild::metabuild_lib_name" time="0" />
    <testcase name="metabuild::metabuild_json_artifact" time="0" />
    <testcase name="metabuild::metabuild_metadata" time="0" />
    <testcase name="metabuild::metabuild_missing_dep" time="0" />
    <testcase name="metabuild::metabuild_override" time="0" />
    <testcase name="metabuild::metabuild_links" time="0" />
    <testcase name="metadata::cargo_metadata_bad_version" time="0" />
    <testcase name="metadata::cargo_metadata_no_deps_cwd" time="0" />
    <testcase name="metadata::cargo_metadata_no_deps_path_to_cargo_toml_absolute" time="0" />
    <testcase name="metadata::cargo_metadata_no_deps_path_to_cargo_toml_parent_absolute" time="0" />
    <testcase name="metadata::cargo_metadata_no_deps_path_to_cargo_toml_parent_relative" time="0" />
    <testcase name="metabuild::metabuild_two_versions" time="0" />
    <testcase name="metadata::cargo_metadata_no_deps_path_to_cargo_toml_relative" time="0" />
    <testcase name="metadata::cargo_metadata_simple" time="0" />
    <testcase name="metadata::cargo_metadata_warns_on_implicit_version" time="0" />
    <testcase name="metabuild::metabuild_optional_dep" time="0" />
    <testcase name="metadata::cargo_metadata_with_invalid_manifest" time="0" />
    <testcase name="metabuild::metabuild_workspace" time="0" />
    <testcase name="metadata::example" time="0" />
    <testcase name="metadata::cargo_metadata_path_to_cargo_toml_project" time="0" />
    <testcase name="metadata::example_lib" time="0" />
    <testcase name="metadata::library_with_features" time="0" />
    <testcase name="metadata::library_with_several_crate_types" time="0" />
    <testcase name="metadata::multiple_features" time="0" />
    <testcase name="metadata::metadata_links" time="0" />
    <testcase name="metadata::package_edition_2018" time="0" />
    <testcase name="metadata::package_metadata" time="0" />
    <testcase name="metadata::target_edition_2018" time="0" />
    <testcase name="metadata::workspace_metadata" time="0" />
    <testcase name="metadata::cargo_metadata_with_deps_and_version" time="0" />
    <testcase name="metadata::workspace_metadata_no_deps" time="0" />
    <testcase name="new::author_prefers_cargo" time="0" />
    <testcase name="new::both_lib_and_bin" time="0" />
    <testcase name="metadata::rename_dependency" time="0" />
    <testcase name="new::existing" time="0" />
    <testcase name="new::explicit_invalid_name_not_suggested" time="0" />
    <testcase name="new::explicit_project_name" time="0" />
    <testcase name="new::finds_author_email" time="0" />
    <testcase name="new::finds_author_priority" time="0" />
    <testcase name="new::finds_author_git" time="0" />
    <testcase name="new::finds_author_user" time="0" />
    <testcase name="new::finds_author_user_escaped" time="0" />
    <testcase name="new::finds_author_username" time="0" />
    <testcase name="new::finds_git_author" time="0" />
    <testcase name="new::finds_git_email" time="0" />
    <testcase name="new::git_prefers_command_line" time="0" />
    <testcase name="new::invalid_characters" time="0" />
    <testcase name="new::keyword_name" time="0" />
    <testcase name="new::new_default_edition" time="0" />
    <testcase name="new::new_with_bad_edition" time="0" />
    <testcase name="new::new_with_edition_2015" time="0" />
    <testcase name="new::finds_local_author_git" time="0" />
    <testcase name="new::no_argument" time="0" />
    <testcase name="new::new_with_edition_2018" time="0" />
    <testcase name="new::reserved_binary_name" time="0" />
    <testcase name="new::reserved_name" time="0" />
    <testcase name="net_config::net_retry_loads_from_config" time="0" />
    <testcase name="new::simple_git" time="0" />
    <testcase name="new::strip_angle_bracket_author_email" time="0" />
    <testcase name="new::simple_lib" time="0" />
    <testcase name="new::simple_bin" time="0" />
    <testcase name="net_config::net_retry_git_outputs_warning" time="0" />
    <testcase name="new::subpackage_git_with_gitignore" time="0" />
    <testcase name="new::subpackage_git_with_vcs_arg" time="0" />
    <testcase name="new::unknown_flags" time="0" />
    <testcase name="new::subpackage_no_git" time="0" />
    <testcase name="out_dir::binary_with_debug" time="0" />
    <testcase name="out_dir::dynamic_library_with_debug" time="0" />
    <testcase name="out_dir::include_only_the_binary_from_the_current_package" time="0" />
    <testcase name="out_dir::avoid_build_scripts" time="0" />
    <testcase name="out_dir::out_dir_is_a_file" time="0" />
    <testcase name="out_dir::rlib_with_debug" time="0" />
    <testcase name="out_dir::static_library_with_debug" time="0" />
    <testcase name="overrides::invalid_semver_version" time="0" />
    <testcase name="overrides::different_version" time="0" />
    <testcase name="overrides::missing_version" time="0" />
    <testcase name="overrides::broken_path_override_warns" time="0" />
    <testcase name="overrides::multiple_specs" time="0" />
    <testcase name="out_dir::replaces_artifacts" time="0" />
    <testcase name="overrides::locked_means_locked_yes_no_seriously_i_mean_locked" time="0" />
    <testcase name="overrides::no_override_self" time="0" />
    <testcase name="overrides::no_warnings_when_replace_is_used_in_another_workspace_member" time="0" />
    <testcase name="overrides::override_plus_dep" time="0" />
    <testcase name="overrides::override_adds_some_deps" time="0" />
    <testcase name="overrides::override_an_override" time="0" />
    <testcase name="overrides::override_simple" time="0" />
    <testcase name="overrides::override_to_path_dep" time="0" />
    <testcase name="overrides::override_wrong_version" time="0" />
    <testcase name="overrides::override_with_nothing" time="0" />
    <testcase name="overrides::override_wrong_name" time="0" />
    <testcase name="overrides::paths_ok_with_optional" time="0" />
    <testcase name="overrides::paths_add_optional_bad" time="0" />
    <testcase name="overrides::overriding_nonexistent_no_spurious" time="0" />
    <testcase name="overrides::override_with_default_feature" time="0" />
    <testcase name="overrides::replace_registry_with_path" time="0" />
    <testcase name="overrides::test_override_dep" time="0" />
    <testcase name="overrides::persists_across_rebuilds" time="0" />
    <testcase name="overrides::replace_to_path_dep" time="0" />
    <testcase name="package::do_not_package_if_repository_is_dirty" time="0" />
    <testcase name="overrides::update" time="0" />
    <testcase name="package::edition_with_metadata" time="0" />
    <testcase name="overrides::transitive" time="0" />
    <testcase name="package::exclude" time="0" />
    <testcase name="overrides::use_a_spec_to_select" time="0" />
    <testcase name="package::ignore_workspace_specifier" time="0" />
    <testcase name="package::do_not_package_if_src_was_modified" time="0" />
    <testcase name="package::include" time="0" />
    <testcase name="package::generated_manifest" time="0" />
    <testcase name="package::lock_file_and_workspace" time="0" />
    <testcase name="package::ignore_nested" time="0" />
    <testcase name="package::no_duplicates_from_modified_tracked_files" time="0" />
    <testcase name="package::no_lock_file_with_library" time="0" />
    <testcase name="package::package_git_submodule" time="0" />
    <testcase name="package::package_lockfile_git_repo" time="0" />
    <testcase name="package::package_lib_with_bin" time="0" />
    <testcase name="package::metadata_warning" time="0" />
    <testcase name="package::package_no_default_features" time="0" />
    <testcase name="package::package_two_kinds_of_deps" time="0" />
    <testcase name="package::package_lockfile" time="0" />
    <testcase name="package::package_with_all_features" time="0" />
    <testcase name="package::package_verbose" time="0" />
    <testcase name="package::path_dependency_no_version" time="0" />
    <testcase name="package::package_with_select_features" time="0" />
    <testcase name="package::package_verification" time="0" />
    <testcase name="package::test_edition_malformed" time="0" />
    <testcase name="package::test_edition" time="0" />
    <testcase name="package::vcs_file_collision" time="0" />
    <testcase name="package::repackage_on_source_change" time="0" />
    <testcase name="package::simple" time="0" />
    <testcase name="patch::add_patch" time="0" />
    <testcase name="patch::add_ignored_patch" time="0" />
    <testcase name="patch::new_minor" time="0" />
    <testcase name="patch::non_crates_io" time="0" />
    <testcase name="patch::no_warn_ws_patch" time="0" />
    <testcase name="patch::new_major" time="0" />
    <testcase name="patch::nonexistent" time="0" />
    <testcase name="patch::patch_depends_on_another_patch" time="0" />
    <testcase name="patch::patch_git" time="0" />
    <testcase name="patch::patch_in_virtual" time="0" />
    <testcase name="patch::patch_to_git" time="0" />
    <testcase name="patch::remove_patch" time="0" />
    <testcase name="patch::replace" time="0" />
    <testcase name="patch::replace_prerelease" time="0" />
    <testcase name="patch::replace_with_crates_io" time="0" />
    <testcase name="patch::transitive_new_major" time="0" />
    <testcase name="patch::transitive_new_minor" time="0" />
    <testcase name="patch::unused" time="0" />
    <testcase name="path::cargo_compile_with_root_dev_deps" time="0" />
    <testcase name="patch::unused_git" time="0" />
    <testcase name="path::cargo_compile_with_root_dev_deps_with_testing" time="0" />
    <testcase name="path::cargo_compile_with_transitive_dev_deps" time="0" />
    <testcase name="path::error_message_for_missing_manifest" time="0" />
    <testcase name="path::custom_target_no_rebuild" time="0" />
    <testcase name="path::missing_path_dependency" time="0" />
    <testcase name="path::dev_deps_no_rebuild_lib" time="0" />
    <testcase name="path::invalid_path_dep_in_workspace_with_lockfile" time="0" />
    <testcase name="path::nested_deps_recompile" time="0" />
    <testcase name="path::no_rebuild_two_deps" time="0" />
    <testcase name="path::override_path_dep" time="0" />
    <testcase name="path::override_and_depend" time="0" />
    <testcase name="path::no_rebuild_dependency" time="0" />
    <testcase name="path::override_relative" time="0" />
    <testcase name="path::override_self" time="0" />
    <testcase name="path::workspace_produces_rlib" time="0" />
    <testcase name="path::deep_dependencies_trigger_rebuild" time="0" />
    <testcase name="path::path_dep_build_cmd" time="0" />
    <testcase name="plugins::panic_abort_plugins" time="0" />
    <testcase name="plugins::native_plugin_dependency_with_custom_ar_linker" time="0" />
    <testcase name="plugins::plugin_to_the_max" time="0" />
    <testcase name="plugins::plugin_with_dynamic_native_dependency" time="0" />
    <testcase name="plugins::shared_panic_abort_plugins" time="0" />
    <testcase name="plugins::doctest_a_plugin" time="0" />
    <testcase name="plugins::plugin_integration" time="0" />
    <testcase name="proc_macro::plugin_and_proc_macro" time="0" />
    <testcase name="path::thin_lto_works" time="0" />
    <testcase name="proc_macro::noop" time="0" />
    <testcase name="proc_macro::proc_macro_crate_type_multiple" time="0" />
    <testcase name="proc_macro::impl_and_derive" time="0" />
    <testcase name="proc_macro::proc_macro_crate_type_warning" time="0" />
    <testcase name="proc_macro::probe_cfg_before_crate_type_discovery" time="0" />
    <testcase name="proc_macro::proc_macro_crate_type_warning_plugin" time="0" />
    <testcase name="profile_config::profile_config_error_paths" time="0" />
    <testcase name="profile_config::profile_config_all_options" time="0" />
    <testcase name="profile_config::profile_config_gated" time="0" />
    <testcase name="profile_config::profile_config_mixed_types" time="0" />
    <testcase name="profile_config::profile_config_no_warn_unknown_override" time="0" />
    <testcase name="profile_config::profile_config_override_spec_multiple" time="0" />
    <testcase name="profile_config::profile_config_syntax_errors" time="0" />
    <testcase name="profile_config::profile_config_validate_errors" time="0" />
    <testcase name="profile_config::profile_config_override_precedence" time="0" />
    <testcase name="proc_macro::proc_macro_doctest" time="0" />
    <testcase name="profile_config::profile_config_validate_warnings" time="0" />
    <testcase name="proc_macro::proc_macro_crate_type" time="0" />
    <testcase name="profile_overrides::profile_override_dev_release_only" time="0" />
    <testcase name="profile_overrides::profile_override_bad_settings" time="0" />
    <testcase name="profile_overrides::profile_override_gated" time="0" />
    <testcase name="profile_overrides::profile_override_spec_multiple" time="0" />
    <testcase name="profile_overrides::profile_override_basic" time="0" />
    <testcase name="profile_overrides::profile_override_spec" time="0" />
    <testcase name="profile_overrides::profile_override_warnings" time="0" />
    <testcase name="profile_overrides::profile_override_hierarchy" time="0" />
    <testcase name="profile_targets::profile_selection_build" time="0" />
    <testcase name="profile_targets::profile_selection_build_all_targets" time="0" />
    <testcase name="profile_targets::profile_selection_check_all_targets" time="0" />
    <testcase name="profile_targets::profile_selection_check_all_targets_release" time="0" />
    <testcase name="profile_targets::profile_selection_bench" time="0" />
    <testcase name="profile_targets::profile_selection_check_all_targets_test" time="0" />
    <testcase name="profile_targets::profile_selection_build_all_targets_release" time="0" />
    <testcase name="profile_targets::profile_selection_build_release" time="0" />
    <testcase name="profiles::debug_override_1" time="0" />
    <testcase name="profiles::opt_level_override_0" time="0" />
    <testcase name="profiles::opt_level_overrides" time="0" />
    <testcase name="profiles::profile_doc_deprecated" time="0" />
    <testcase name="profile_targets::profile_selection_test" time="0" />
    <testcase name="profile_targets::profile_selection_test_release" time="0" />
    <testcase name="profiles::profile_in_non_root_manifest_triggers_a_warning" time="0" />
    <testcase name="profiles::profile_in_virtual_manifest_works" time="0" />
    <testcase name="profiles::profile_overrides" time="0" />
    <testcase name="profiles::profile_panic_test_bench" time="0" />
    <testcase name="publish::block_publish_feature_not_enabled" time="0" />
    <testcase name="profile_targets::profile_selection_doc" time="0" />
    <testcase name="publish::block_publish_no_registry" time="0" />
    <testcase name="profiles::top_level_overrides_deps" time="0" />
    <testcase name="publish::dont_publish_dirty" time="0" />
    <testcase name="publish::git_deps" time="0" />
    <testcase name="publish::new_crate_rejected" time="0" />
    <testcase name="publish::old_token_location" time="0" />
    <testcase name="publish::dry_run" time="0" />
    <testcase name="publish::ignore_when_crate_ignored" time="0" />
    <testcase name="publish::path_dependency_no_version" time="0" />
    <testcase name="publish::publish_empty_list" time="0" />
    <testcase name="publish::publish_allowed_registry" time="0" />
    <testcase name="publish::publish_clean" time="0" />
    <testcase name="publish::publish_in_sub_repo" time="0" />
    <testcase name="publish::publish_when_ignored" time="0" />
    <testcase name="publish::publish_with_all_features" time="0" />
    <testcase name="publish::publish_with_no_default_features" time="0" />
    <testcase name="publish::registry_not_in_publish_list" time="0" />
    <testcase name="publish::simple" time="0" />
    <testcase name="publish::simple_with_host" time="0" />
    <testcase name="publish::simple_with_index_and_host" time="0" />
    <testcase name="read_manifest::cargo_read_manifest_cwd" time="0" />
    <testcase name="publish::publish_with_select_features" time="0" />
    <testcase name="publish::unpublishable_crate" time="0" />
    <testcase name="read_manifest::cargo_read_manifest_path_to_cargo_toml_absolute" time="0" />
    <testcase name="publish::publish_with_patch" time="0" />
    <testcase name="read_manifest::cargo_read_manifest_path_to_cargo_toml_parent_relative" time="0" />
    <testcase name="read_manifest::cargo_read_manifest_path_to_cargo_toml_parent_absolute" time="0" />
    <testcase name="read_manifest::cargo_read_manifest_path_to_cargo_toml_relative" time="0" />
    <testcase name="registry::bad_cksum" time="0" />
    <testcase name="registry::bad_and_or_malicious_packages_rejected" time="0" />
    <testcase name="registry::bad_license_file" time="0" />
    <testcase name="registry::add_dep_dont_update_registry" time="0" />
    <testcase name="registry::bundled_crate_in_registry" time="0" />
    <testcase name="registry::disallow_network" time="0" />
    <testcase name="registry::bump_version_dont_update_registry" time="0" />
    <testcase name="registry::deps" time="0" />
    <testcase name="registry::fetch_downloads" time="0" />
    <testcase name="registry::dev_dependency_not_used" time="0" />
    <testcase name="registry::git_and_registry_dep" time="0" />
    <testcase name="registry::lockfile_locks" time="0" />
    <testcase name="registry::git_init_templatedir_missing" time="0" />
    <testcase name="registry::login_with_no_cargo_dir" time="0" />
    <testcase name="registry::login_with_differently_sized_token" time="0" />
    <testcase name="registry::mis_hyphenated" time="0" />
    <testcase name="registry::lockfile_locks_transitively" time="0" />
    <testcase name="registry::nonexistent" time="0" />
    <testcase name="registry::old_version_req" time="0" />
    <testcase name="registry::old_version_req_upstream" time="0" />
    <testcase name="registry::only_download_relevant" time="0" />
    <testcase name="registry::package_with_path_deps" time="0" />
    <testcase name="registry::relying_on_a_yank_is_bad" time="0" />
    <testcase name="registry::resolve_and_backtracking" time="0" />
    <testcase name="registry::toml_lies_but_index_is_truth" time="0" />
    <testcase name="registry::update_backtracking_ok" time="0" />
    <testcase name="registry::simple" time="0" />
    <testcase name="registry::update_offline" time="0" />
    <testcase name="registry::rename_deps_and_features" time="0" />
    <testcase name="registry::update_registry" time="0" />
    <testcase name="registry::update_multiple_packages" time="0" />
    <testcase name="registry::update_same_prefix_oh_my_how_was_this_a_bug" time="0" />
    <testcase name="registry::update_lockfile" time="0" />
    <testcase name="registry::update_publish_then_update" time="0" />
    <testcase name="registry::update_with_lockfile_if_packages_missing" time="0" />
    <testcase name="registry::update_transitive_dependency" time="0" />
    <testcase name="registry::upstream_warnings_on_extra_verbose" time="0" />
    <testcase name="registry::updating_a_dep" time="0" />
    <testcase name="registry::wrong_case" time="0" />
    <testcase name="registry::use_semver" time="0" />
    <testcase name="registry::vv_prints_warnings" time="0" />
    <testcase name="registry::wrong_version" time="0" />
    <testcase name="rename_deps::features_not_working" time="0" />
    <testcase name="registry::yanks_are_not_used" time="0" />
    <testcase name="registry::yanks_in_lockfiles_are_ok" time="0" />
    <testcase name="rename_deps::can_run_doc_tests" time="0" />
    <testcase name="rename_deps::features_still_work" time="0" />
    <testcase name="rename_deps::rename_and_patch" time="0" />
    <testcase name="rename_deps::rename_affects_fingerprint" time="0" />
    <testcase name="rename_deps::lots_of_names" time="0" />
    <testcase name="rename_deps::rename_dependency" time="0" />
    <testcase name="required_features::bench_arg_features" time="0" />
    <testcase name="rename_deps::rename_twice" time="0" />
    <testcase name="required_features::bench_default_features" time="0" />
    <testcase name="rename_deps::rename_with_dash" time="0" />
    <testcase name="required_features::bench_multiple_required_features" time="0" />
    <testcase name="rename_deps::rename_with_different_names" time="0" />
    <testcase name="required_features::build_bin_arg_features" time="0" />
    <testcase name="required_features::build_example_arg_features" time="0" />
    <testcase name="required_features::build_bin_default_features" time="0" />
    <testcase name="required_features::build_bin_multiple_required_features" time="0" />
    <testcase name="required_features::build_example_default_features" time="0" />
    <testcase name="required_features::install_arg_features" time="0" />
    <testcase name="required_features::build_example_multiple_required_features" time="0" />
    <testcase name="required_features::install_multiple_required_features" time="0" />
    <testcase name="required_features::dep_feature_in_toml" time="0" />
    <testcase name="required_features::run_default_multiple_required_features" time="0" />
    <testcase name="required_features::install_default_features" time="0" />
    <testcase name="required_features::dep_feature_in_cmd_line" time="0" />
    <testcase name="required_features::run_default" time="0" />
    <testcase name="required_features::test_arg_features" time="0" />
    <testcase name="resolve::conflict_store_bug" time="0" />
    <testcase name="resolve::hard_equality" time="0" />
    <testcase name="resolve::incomplete_information_skiping" time="0" />
    <testcase name="resolve::incomplete_information_skiping_2" time="0" />
    <testcase name="resolve::incomplete_information_skiping_3" time="0" />
    <testcase name="required_features::test_default_features" time="0" />
    <testcase name="required_features::test_multiple_required_features" time="0" />
    <testcase name="required_features::test_skips_compiling_bin_with_missing_required_features" time="0" />
    <testcase name="resolve::minimal_version_cli" time="0" />
    <testcase name="resolve::large_conflict_cache" time="0" />
    <testcase name="resolve::limited_independence_of_irrelevant_alternatives" time="0" />
    <testcase name="resolve::resolving_allows_multiple_compatible_versions" time="0" />
    <testcase name="resolve::resolving_backtrack" time="0" />
    <testcase name="resolve::resolving_backtrack_features" time="0" />
    <testcase name="resolve::resolving_but_no_exists" time="0" />
    <testcase name="resolve::resolving_cycle" time="0" />
    <testcase name="resolve::resolving_incompat_versions" time="0" />
    <testcase name="resolve::resolving_mis_hyphenated_from_registry" time="0" />
    <testcase name="resolve::passes_validation" time="0" />
    <testcase name="resolve::resolving_with_constrained_sibling_backtrack_activation" time="0" />
    <testcase name="resolve::resolving_with_constrained_sibling_backtrack_parent" time="0" />
    <testcase name="resolve::resolving_with_constrained_sibling_transitive_dep_effects" time="0" />
    <testcase name="resolve::resolving_with_deep_backtracking" time="0" />
    <testcase name="resolve::resolving_with_deep_traps" time="0" />
    <testcase name="resolve::minimum_version_errors_the_same" time="0" />
    <testcase name="resolve::resolving_with_many_versions" time="0" />
    <testcase name="resolve::resolving_with_specific_version" time="0" />
    <testcase name="resolve::resolving_with_sys_crates" time="0" />
    <testcase name="resolve::resolving_wrong_case_from_registry" time="0" />
    <testcase name="resolve::test_dependency_with_empty_name" time="0" />
    <testcase name="resolve::test_resolving_common_transitive_deps" time="0" />
    <testcase name="resolve::test_resolving_empty_dependency_list" time="0" />
    <testcase name="resolve::test_resolving_maximum_version_with_transitive_deps" time="0" />
    <testcase name="resolve::test_resolving_minimum_version_with_transitive_deps" time="0" />
    <testcase name="resolve::test_resolving_multiple_deps" time="0" />
    <testcase name="resolve::test_resolving_one_dep" time="0" />
    <testcase name="resolve::test_resolving_only_package" time="0" />
    <testcase name="resolve::test_resolving_transitive_deps" time="0" />
    <testcase name="resolve::test_resolving_with_dev_deps" time="0" />
    <testcase name="resolve::test_resolving_with_same_name" time="0" />
    <testcase name="run::autobins_disables" time="0" />
    <testcase name="run::bogus_default_run" time="0" />
    <testcase name="resolve::resolving_with_constrained_cousins_backtrack" time="0" />
    <testcase name="run::default_run_unstable" time="0" />
    <testcase name="run::default_run_workspace" time="0" />
    <testcase name="run::dashes_are_forwarded" time="0" />
    <testcase name="run::either_name_or_example" time="0" />
    <testcase name="resolve::removing_a_dep_cant_brake" time="0" />
    <testcase name="run::exit_code" time="0" />
    <testcase name="run::exit_code_verbose" time="0" />
    <testcase name="run::example_with_release_flag" time="0" />
    <testcase name="run::explicit_bin_with_args" time="0" />
    <testcase name="run::no_main_file" time="0" />
    <testcase name="run::fail_no_extra_verbose" time="0" />
    <testcase name="run::one_bin_multiple_examples" time="0" />
    <testcase name="run::quiet_and_verbose_config" time="0" />
    <testcase name="run::library_paths_sorted_alphabetically" time="0" />
    <testcase name="run::release_works" time="0" />
    <testcase name="run::run_bins" time="0" />
    <testcase name="run::run_bin_different_name" time="0" />
    <testcase name="run::run_bin_example" time="0" />
    <testcase name="run::run_example_autodiscover_2015" time="0" />
    <testcase name="run::run_example_autodiscover_2015_with_autoexamples_disabled" time="0" />
    <testcase name="run::run_example_autodiscover_2015_with_autoexamples_enabled" time="0" />
    <testcase name="run::run_example_autodiscover_2018" time="0" />
    <testcase name="run::run_example" time="0" />
    <testcase name="run::run_library_example" time="0" />
    <testcase name="run::run_dylib_dep" time="0" />
    <testcase name="run::run_with_filename" time="0" />
    <testcase name="run::run_from_executable_folder" time="0" />
    <testcase name="run::run_workspace" time="0" />
    <testcase name="run::run_with_library_paths" time="0" />
    <testcase name="run::run_multiple_packages" time="0" />
    <testcase name="run::simple_quiet_and_verbose" time="0" />
    <testcase name="run::simple" time="0" />
    <testcase name="run::simple_quiet" time="0" />
    <testcase name="run::simple_with_args" time="0" />
    <testcase name="run::too_many_bins" time="0" />
    <testcase name="run::specify_default_run" time="0" />
    <testcase name="rustc::build_foo_with_bar_dependency" time="0" />
    <testcase name="run::specify_name" time="0" />
    <testcase name="rustc::build_lib_for_foo" time="0" />
    <testcase name="rustc::build_only_bar_dependency" time="0" />
    <testcase name="rustc::build_main_and_allow_unstable_options" time="0" />
    <testcase name="rustc::fail_with_multiple_packages" time="0" />
    <testcase name="rustc::fails_when_trying_to_build_main_and_lib_with_args" time="0" />
    <testcase name="rustc::fails_with_args_to_all_binaries" time="0" />
    <testcase name="rustc::build_with_args_to_one_of_multiple_binaries" time="0" />
    <testcase name="rustc::build_with_args_to_one_of_multiple_tests" time="0" />
    <testcase name="rustc::lib" time="0" />
    <testcase name="rustc::rustc_fingerprint" time="0" />
    <testcase name="rustc::rustc_test_with_implicit_bin" time="0" />
    <testcase name="rustc::rustc_with_other_profile" time="0" />
    <testcase name="rustc::targets_selected_all" time="0" />
    <testcase name="rustc::targets_selected_default" time="0" />
    <testcase name="rustdoc::features" time="0" />
    <testcase name="rustdoc::rustdoc_args" time="0" />
    <testcase name="rustc_info_cache::rustc_info_cache" time="0" />
    <testcase name="rustdoc::rustdoc_foo_with_bar_dependency" time="0" />
    <testcase name="rustdoc::rustdoc_only_bar_dependency" time="0" />
    <testcase name="rustdoc::rustdoc_same_name_documents_lib" time="0" />
    <testcase name="rustdocflags::bad_flags" time="0" />
    <testcase name="rustdoc::rustdoc_simple" time="0" />
    <testcase name="rustdocflags::parses_config" time="0" />
    <testcase name="rustdocflags::parses_env" time="0" />
    <testcase name="resolve::resolving_with_many_equivalent_backtracking" time="0" />
    <testcase name="rustdocflags::rustdocflags_passed_to_rustdoc_through_cargo_test_only_once" time="0" />
    <testcase name="rustflags::build_rustflags_build_script" time="0" />
    <testcase name="rustdocflags::rustdocflags_passed_to_rustdoc_through_cargo_test" time="0" />
    <testcase name="rustflags::build_rustflags_build_script_dep" time="0" />
    <testcase name="rustflags::build_rustflags_build_script_dep_with_target" time="0" />
    <testcase name="rustflags::build_rustflags_no_recompile" time="0" />
    <testcase name="rustflags::build_rustflags_build_script_with_target" time="0" />
    <testcase name="rustflags::build_rustflags_plugin" time="0" />
    <testcase name="rustflags::build_rustflags_plugin_dep" time="0" />
    <testcase name="rustflags::build_rustflags_normal_source" time="0" />
    <testcase name="rustdocflags::rerun" time="0" />
    <testcase name="rustflags::build_rustflags_plugin_with_target" time="0" />
    <testcase name="rustflags::build_rustflags_normal_source_with_target" time="0" />
    <testcase name="rustflags::build_rustflags_plugin_dep_with_target" time="0" />
    <testcase name="rustflags::build_rustflags_recompile" time="0" />
    <testcase name="rustflags::build_rustflags_with_home_config" time="0" />
    <testcase name="rustflags::build_rustflags_recompile2" time="0" />
    <testcase name="rustflags::env_rustflags_build_script" time="0" />
    <testcase name="rustflags::env_rustflags_build_script_dep" time="0" />
    <testcase name="rustflags::cfg_rustflags_normal_source" time="0" />
    <testcase name="rustflags::env_rustflags_build_script_dep_with_target" time="0" />
    <testcase name="rustflags::env_rustflags_build_script_with_target" time="0" />
    <testcase name="rustflags::cfg_rustflags_precedence" time="0" />
    <testcase name="rustflags::env_rustflags_no_recompile" time="0" />
    <testcase name="rustflags::env_rustflags_plugin" time="0" />
    <testcase name="rustflags::env_rustflags_plugin_dep" time="0" />
    <testcase name="rustflags::env_rustflags_plugin_dep_with_target" time="0" />
    <testcase name="rustflags::env_rustflags_normal_source" time="0" />
    <testcase name="rustflags::env_rustflags_plugin_with_target" time="0" />
    <testcase name="rustflags::env_rustflags_normal_source_with_target" time="0" />
    <testcase name="rustflags::env_rustflags_recompile" time="0" />
    <testcase name="rustflags::env_rustflags_recompile2" time="0" />
    <testcase name="rustflags::target_rustflags_string_and_array_form1" time="0" />
    <testcase name="rustflags::target_rustflags_string_and_array_form2" time="0" />
    <testcase name="search::help" time="0" />
    <testcase name="rustflags::target_rustflags_normal_source" time="0" />
    <testcase name="search::multiple_query_params" time="0" />
    <testcase name="rustflags::target_rustflags_precedence" time="0" />
    <testcase name="search::not_update" time="0" />
    <testcase name="search::replace_default" time="0" />
    <testcase name="rustflags::two_matching_in_config" time="0" />
    <testcase name="search::simple" time="0" />
    <testcase name="search::simple_with_index_and_host" time="0" />
    <testcase name="support::lines_match_works" time="0" />
    <testcase name="support::resolver::meta_test_deep_pretty_print_registry" time="0" />
    <testcase name="search::simple_with_host" time="0" />
    <testcase name="shell_quoting::features_are_quoted" time="0" />
    <testcase name="test::almost_cyclic_but_not_quite" time="0" />
    <testcase name="support::resolver::meta_test_deep_trees_from_strategy" time="0" />
    <testcase name="test::bench_without_name" time="0" />
    <testcase name="test::bad_example" time="0" />
    <testcase name="test::bin_is_preserved" time="0" />
    <testcase name="test::bin_does_not_rebuild_tests" time="0" />
    <testcase name="test::bin_without_name" time="0" />
    <testcase name="support::resolver::meta_test_multiple_versions_strategy" time="0" />
    <testcase name="test::bin_there_for_integration" time="0" />
    <testcase name="small_fd_limits::use_git_gc" time="0" />
    <testcase name="test::cargo_test_env" time="0" />
    <testcase name="test::build_then_selective_test" time="0" />
    <testcase name="test::cargo_test_failing_test_in_lib" time="0" />
    <testcase name="test::cargo_test_overflow_checks" time="0" />
    <testcase name="test::cargo_test_failing_test_in_bin" time="0" />
    <testcase name="test::can_not_mix_doc_tests_and_regular_tests" time="0" />
    <testcase name="test::cargo_test_failing_test_in_test" time="0" />
    <testcase name="test::cargo_test_simple" time="0" />
    <testcase name="test::cargo_test_release" time="0" />
    <testcase name="test::cargo_test_verbose" time="0" />
    <testcase name="test::cargo_test_twice" time="0" />
    <testcase name="test::cfg_test_even_with_no_harness" time="0" />
    <testcase name="test::cyclic_dev" time="0" />
    <testcase name="test::dashes_to_underscores" time="0" />
    <testcase name="test::dev_dep_with_build_script" time="0" />
    <testcase name="test::cyclic_dev_dep_doc_test" time="0" />
    <testcase name="test::doctest_only_with_dev_dep" time="0" />
    <testcase name="test::doctest_dev_dep" time="0" />
    <testcase name="test::doctest_feature" time="0" />
    <testcase name="test::doctest_and_registry" time="0" />
    <testcase name="test::dylib_doctest2" time="0" />
    <testcase name="test::doctest_skip_staticlib" time="0" />
    <testcase name="test::dont_run_examples" time="0" />
    <testcase name="test::dylib_doctest" time="0" />
    <testcase name="test::example_without_name" time="0" />
    <testcase name="test::example_bin_same_name" time="0" />
    <testcase name="test::example_with_dev_dep" time="0" />
    <testcase name="test::example_dev_dep" time="0" />
    <testcase name="test::external_test_explicit" time="0" />
    <testcase name="test::external_test_implicit" time="0" />
    <testcase name="test::external_test_named_test" time="0" />
    <testcase name="test::filter_no_doc_tests" time="0" />
    <testcase name="test::json_artifact_includes_executable_for_integration_tests" time="0" />
    <testcase name="test::json_artifact_includes_executable_for_library_tests" time="0" />
    <testcase name="test::json_artifact_includes_test_flag" time="0" />
    <testcase name="test::lib_bin_same_name" time="0" />
    <testcase name="test::lib_with_standard_name2" time="0" />
    <testcase name="test::find_dependency_of_proc_macro_dependency_with_target" time="0" />
    <testcase name="test::lib_with_standard_name" time="0" />
    <testcase name="test::lib_without_name" time="0" />
    <testcase name="test::many_similar_names" time="0" />
    <testcase name="test::only_test_docs" time="0" />
    <testcase name="test::no_fail_fast" time="0" />
    <testcase name="test::panic_abort_multiple" time="0" />
    <testcase name="test::selective_test_optional_dep" time="0" />
    <testcase name="test::pass_correct_cfgs_flags_to_rustdoc" time="0" />
    <testcase name="test::pass_through_command_line" time="0" />
    <testcase name="test::selective_test_wonky_profile" time="0" />
    <testcase name="test::publish_a_crate_without_tests" time="0" />
    <testcase name="test::selective_testing_with_docs" time="0" />
    <testcase name="test::test_all_exclude" time="0" />
    <testcase name="test::test_all_targets_lib" time="0" />
    <testcase name="test::selective_testing" time="0" />
    <testcase name="test::test_all_member_dependency_same_name" time="0" />
    <testcase name="test::test_dep_with_dev" time="0" />
    <testcase name="test::test_all_virtual_manifest" time="0" />
    <testcase name="test::test_all_workspace" time="0" />
    <testcase name="test::test_build_script_links" time="0" />
    <testcase name="test::test_hint_workspace" time="0" />
    <testcase name="test::test_dylib" time="0" />
    <testcase name="test::test_hint_not_masked_by_doctest" time="0" />
    <testcase name="test::test_many_targets" time="0" />
    <testcase name="test::test_many_with_features" time="0" />
    <testcase name="test::test_multiple_packages" time="0" />
    <testcase name="test::test_no_harness" time="0" />
    <testcase name="test::test_no_run" time="0" />
    <testcase name="test::test_panic_abort_with_dep" time="0" />
    <testcase name="test::test_order" time="0" />
    <testcase name="test::test_run_implicit_bench_target" time="0" />
    <testcase name="test::test_run_implicit_bin_target" time="0" />
    <testcase name="test::test_release_ignore_panic" time="0" />
    <testcase name="test::test_run_specific_bin_target" time="0" />
    <testcase name="test::test_run_implicit_test_target" time="0" />
    <testcase name="test::test_run_specific_test_target" time="0" />
    <testcase name="test::test_then_build" time="0" />
    <testcase name="test::test_virtual_manifest_all_implied" time="0" />
    <testcase name="test::test_run_implicit_example_target" time="0" />
    <testcase name="test::test_twice_with_build_cmd" time="0" />
    <testcase name="test::test_without_name" time="0" />
    <testcase name="test::test_with_example_twice" time="0" />
    <testcase name="tool_paths::absolute_tools" time="0" />
    <testcase name="test::test_with_deep_lib_dep" time="0" />
    <testcase name="tool_paths::custom_runner_cfg_collision" time="0" />
    <testcase name="tool_paths::custom_runner_cfg" time="0" />
    <testcase name="test::test_with_lib_dep" time="0" />
    <testcase name="tool_paths::pathless_tools" time="0" />
    <testcase name="tool_paths::custom_runner_cfg_precedence" time="0" />
    <testcase name="tool_paths::relative_tools" time="0" />
    <testcase name="tool_paths::custom_runner" time="0" />
    <testcase name="update::change_package_version" time="0" />
    <testcase name="update::add_dep_deep_new_requirement" time="0" />
    <testcase name="update::conservative" time="0" />
    <testcase name="update::preserve_top_comment" time="0" />
    <testcase name="update::dry_run_update" time="0" />
    <testcase name="update::everything_real_deep" time="0" />
    <testcase name="update::minor_update_two_places" time="0" />
    <testcase name="update::update_precise" time="0" />
    <testcase name="update::transitive_minor_update" time="0" />
    <testcase name="verify_project::cargo_verify_project_cwd" time="0" />
    <testcase name="verify_project::cargo_verify_project_path_to_cargo_toml_absolute" time="0" />
    <testcase name="verify_project::cargo_verify_project_honours_unstable_features" time="0" />
    <testcase name="verify_project::cargo_verify_project_path_to_cargo_toml_relative" time="0" />
    <testcase name="version::version_works_with_bad_config" time="0" />
    <testcase name="version::version_works_with_bad_target_dir" time="0" />
    <testcase name="version::simple" time="0" />
    <testcase name="update::update_via_new_dep" time="0" />
    <testcase name="update::update_via_new_member" time="0" />
    <testcase name="warn_on_failure::no_warning_on_bin_failure" time="0" />
    <testcase name="warn_on_failure::warning_on_lib_failure" time="0" />
    <testcase name="workspaces::cycle" time="0" />
    <testcase name="workspaces::dangling_member" time="0" />
    <testcase name="warn_on_failure::no_warning_on_success" time="0" />
    <testcase name="workspaces::cargo_home_at_root_works" time="0" />
    <testcase name="workspaces::bare_workspace_ok" time="0" />
    <testcase name="workspaces::error_if_parent_cargo_toml_is_invalid" time="0" />
    <testcase name="workspaces::dont_recurse_out_of_cargo_home" time="0" />
    <testcase name="workspaces::exclude_members_preferred" time="0" />
    <testcase name="workspaces::dep_used_with_separate_features" time="0" />
    <testcase name="workspaces::exclude_but_also_depend" time="0" />
    <testcase name="workspaces::explicit_package_argument_works_with_virtual_manifest" time="0" />
    <testcase name="workspaces::glob_syntax_invalid_members" time="0" />
    <testcase name="workspaces::excluded_simple" time="0" />
    <testcase name="workspaces::include_virtual" time="0" />
    <testcase name="workspaces::fetch_fetches_all" time="0" />
    <testcase name="workspaces::invalid_members" time="0" />
    <testcase name="workspaces::invalid_parent_pointer" time="0" />
    <testcase name="workspaces::inferred_root" time="0" />
    <testcase name="workspaces::inferred_path_dep" time="0" />
    <testcase name="workspaces::lock_doesnt_change_depending_on_crate" time="0" />
    <testcase name="workspaces::glob_syntax" time="0" />
    <testcase name="workspaces::new_warns_you_this_will_not_work" time="0" />
    <testcase name="workspaces::lockfile_can_specify_nonexistant_members" time="0" />
    <testcase name="workspaces::parent_doesnt_point_to_child" time="0" />
    <testcase name="workspaces::path_dep_outside_workspace_is_not_member" time="0" />
    <testcase name="workspaces::members_include_path_deps" time="0" />
    <testcase name="workspaces::lock_works_for_everyone" time="0" />
    <testcase name="workspaces::parent_pointer_works" time="0" />
    <testcase name="workspaces::relative_path_for_root_works" time="0" />
    <testcase name="workspaces::same_names_in_workspace" time="0" />
    <testcase name="workspaces::relative_path_for_member_works" time="0" />
    <testcase name="workspaces::rebuild_please" time="0" />
    <testcase name="workspaces::simple_explicit" time="0" />
    <testcase name="workspaces::relative_rustc" time="0" />
    <testcase name="workspaces::share_dependencies" time="0" />
    <testcase name="workspaces::simple_explicit_default_members" time="0" />
    <testcase name="workspaces::two_roots" time="0" />
    <testcase name="workspaces::test_path_dependency_under_member" time="0" />
    <testcase name="workspaces::virtual_build_no_members" time="0" />
    <testcase name="workspaces::virtual_default_member_is_not_a_member" time="0" />
    <testcase name="workspaces::virtual_build_all_implied" time="0" />
    <testcase name="workspaces::test_in_and_out_of_workspace" time="0" />
    <testcase name="workspaces::virtual_misconfigure" time="0" />
    <testcase name="workspaces::virtual_default_members" time="0" />
    <testcase name="workspaces::workspace_isnt_root" time="0" />
    <testcase name="workspaces::transitive_path_dep" time="0" />
    <testcase name="workspaces::virtual_works" time="0" />
    <testcase name="workspaces::ws_rustc_err" time="0" />
    <testcase name="workspaces::workspace_in_git" time="0" />
    <testcase name="workspaces::ws_err_unused" time="0" />
    <testcase name="workspaces::you_cannot_generate_lockfile_for_empty_workspaces" time="0" />
    <testcase name="workspaces::ws_warn_path" time="0" />
    <testcase name="workspaces::workspace_with_transitive_dev_deps" time="0" />
    <testcase name="workspaces::ws_warn_unused" time="0" />
    <system-out />
    <system-err />
  </testsuite>
</testsuites>