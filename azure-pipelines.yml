# Recommened editor for this file: https://github.com/Microsoft/azure-pipelines-vscode

schedules:
  # run weekly to keep cache fresh
  - cron: "0 0 * * 0"
    branches:
      include: 
      - master
    always: true

variables:
  CHANNEL: stable
  CACHE_SALT: 1
  RUSTCACHE_ROOT: $(Build.SourcesDirectory)/target
  CARGO_DEPENDENCIES_FILE: $(Pipeline.Workspace)/Cargo.dependencies
  CARGO_HOME: $(RUSTCACHE_ROOT)/rustcache/.cargo
  RUSTUP_HOME: $(RUSTCACHE_ROOT)/rustcache/.rustup
  SCCACHE_DIR: $(RUSTCACHE_ROOT)/rustcache/sccache
  SCCACHE_CACHE_SIZE: 1G
  CACHE_KEY_BASE: '"CACHE_SALT=$(CACHE_SALT)-$(VM_IMAGE)-$(CHANNEL)-$(TOOLS_TARGET)-$(TARGET)-ENABLE_SCCACHE=$(ENABLE_SCCACHE)"'
  TOOLS_TARGET: $(TARGET)
  POOL_NAME: ''
  VM_IMAGE: ''
  ENABLE_SCCACHE: 0

jobs:
  - job: cached
    pool:
      name: $(POOL_NAME)
      vmImage: $(VM_IMAGE)
    strategy:
      matrix:
        vs2017-gnu:
          TARGET: x86_64-pc-windows-gnu
          TOOLS_TARGET: x86_64-pc-windows-msvc
          VM_IMAGE: vs2017-win2016
        vs2019-gnu:
          TARGET: x86_64-pc-windows-gnu
          TOOLS_TARGET: x86_64-pc-windows-msvc
          VM_IMAGE: windows-2019
        vs2019-gnu-sccache:
          TARGET: x86_64-pc-windows-gnu
          TOOLS_TARGET: x86_64-pc-windows-msvc
          VM_IMAGE: windows-2019
          ENABLE_SCCACHE: 1
        vs2017-msvc:
          TARGET: x86_64-pc-windows-msvc
          VM_IMAGE: vs2017-win2016
        vs2019-msvc:
          TARGET: x86_64-pc-windows-msvc
          VM_IMAGE: windows-2019
        vs2019-msvc-sccache:
          TARGET: x86_64-pc-windows-msvc
          VM_IMAGE: windows-2019
          ENABLE_SCCACHE: 1
        osx-10.14-x86_64-apple-darwin:
          TARGET: x86_64-apple-darwin
          VM_IMAGE: macos-10.14
        osx-10.14-x86_64-apple-darwin-sccache:
          TARGET: x86_64-apple-darwin
          VM_IMAGE: macos-10.14
          ENABLE_SCCACHE: 1
        x86_64-unknown-linux-gnu:
          TARGET: x86_64-unknown-linux-gnu
          VM_IMAGE: ubuntu-16.04
        x86_64-unknown-linux-gnu-sccache:
          TARGET: x86_64-unknown-linux-gnu
          VM_IMAGE: ubuntu-16.04
          ENABLE_SCCACHE: 1

    steps:
      - bash: |
          echo "$(CARGO_DEPENDENCIES_FILE)"
          echo "$CARGO_DEPENDENCIES_FILE"
          grep checksum ./Cargo.lock > "$CARGO_DEPENDENCIES_FILE"
        displayName: 'extract dependencies from cargo.lock'

      # set up environment and restore cache
      - bash: |
          rm -Rf "$RUSTCACHE_ROOT"
          echo "##vso[task.prependpath]$(CARGO_HOME)/bin"
        displayName: clean state on private agents
      
      - task: Cache@2
        inputs:
          key: '$(CACHE_KEY_BASE) | ./Cargo.toml | ./Cargo.lock | $(CARGO_DEPENDENCIES_FILE) | $(Build.SourceVersion)'
          path: $(RUSTCACHE_ROOT)
          cacheHitVar: CACHE_LOOKUP_RESULT
          restoreKeys: |
            $(CACHE_KEY_BASE) | ./Cargo.toml | ./Cargo.lock | $(CARGO_DEPENDENCIES_FILE)
            $(CACHE_KEY_BASE) | ./Cargo.toml | ./Cargo.lock
            $(CACHE_KEY_BASE) | ./Cargo.toml
            $(CACHE_KEY_BASE)

      # install tools (these will be cached)
      - bash: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path --default-toolchain none
          which rustup && rustup -V
        displayName: Enusure rustup is installed
      - bash: |
          rustup toolchain install stable-$(TOOLS_TARGET)
          rustup default stable-$(TOOLS_TARGET)
          rustup update stable-$(TOOLS_TARGET)
          which rustup && rustup -V && which cargo && cargo -V && which rustc && rustc -V
        displayName: Select toolchain for tools
      - bash: |
          echo cargo install seems to always want to update sccache
          which sccache || cargo install sccache
          echo '##vso[task.setvariable variable=RUSTC_WRAPPER]sccache'
          which sccache && sccache --version && sccache --show-stats
        displayName: Install sccache
        condition: and(succeeded(), eq(variables['ENABLE_SCCACHE'], '1'))
      - bash: |
          cargo install cargo2junit
          which cargo2junit
        displayName: Install cargo2junit
      - bash: |
          cargo install cargo-cache
          cargo cache
        displayName: Install cargo-cache
      - bash: |
          export RUSTC_WRAPPER=
          cargo install cargo-update
          cargo install-update -a
        displayName: Ensure cargo-installed tools are up-to-date (if updating the cache anyway)
        condition: and(succeeded(), ne(variables['CACHE_LOOKUP_RESULT'], 'true')) 
      - bash: |
          rustup toolchain install $(CHANNEL)-$(TARGET)
          rustup default $(CHANNEL)-$(TARGET)
          rustup update $(CHANNEL)-$(TARGET)
          which rustup && rustup -V && which cargo && cargo -V && which rustc && rustc -V
        displayName: Select toolchain for build

      # build and test
      - bash: |
          cargo build
        displayName: cargo build
      - bash: |
          cargo test -- -Z unstable-options --format json | tee test_results_debug.json
        displayName: cargo test

      - bash: |
          cargo build --release
        displayName: cargo build --release
      - bash: |
          cargo test --release -- -Z unstable-options --format json | tee test_results_release.json
        displayName: cargo test --release

      # store test results
      - bash: |
          cat test_results_debug.json | cargo2junit > test_results_debug_lkg.xml
          cat test_results_release.json | cargo2junit > test_results_release_lkg.xml
        displayName: convert to junit using LKG cargo2junit
        condition: succeededOrFailed()
      - task: PublishTestResults@2
        inputs: 
          testResultsFormat: 'JUnit'
          testResultsFiles: 'test_results_debug_lkg.xml'
          testRunTitle: LKG_DEBUG_$(System.JobDisplayName)
          buildPlatform: LKG_DEBUG_$(System.JobDisplayName)
        condition: succeededOrFailed()
      - task: PublishTestResults@2
        inputs: 
          testResultsFormat: 'JUnit'
          testResultsFiles: 'test_results_release_lkg.xml'
          testRunTitle: LKG_RELEASE_$(System.JobDisplayName)
          buildPlatform: LKG_RELEASE_$(System.JobDisplayName)
        condition: succeededOrFailed()

      # self-host test of cargo2junit: store test results using the cargo2junit that was just built
      - bash: |
          cat test_results_debug.json | ./target/debug/cargo2junit > test_results_debug.xml
          cat test_results_release.json | ./target/debug/cargo2junit > test_results_release.xml
        displayName: convert to junit using just-built cargo2junit
      - task: PublishTestResults@2
        inputs: 
          testResultsFormat: 'JUnit'
          testResultsFiles: 'test_results_debug.xml'
          testRunTitle: DEBUG_$(System.JobDisplayName)
          buildPlatform: DEBUG_$(System.JobDisplayName)
        condition: succeededOrFailed()
      - task: PublishTestResults@2
        inputs: 
          testResultsFormat: 'JUnit'
          testResultsFiles: 'test_results_release.xml'
          testRunTitle: RELEASE_$(System.JobDisplayName)
          buildPlatform: RELEASE_$(System.JobDisplayName)
        condition: succeededOrFailed()

      # some cleanup before the cache stores
      - bash: |
          sccache --show-stats
          sccache --stop-server
        displayName: shutdown sccache
        condition: eq(variables['ENABLE_SCCACHE'], '1')
        continueOnError: true
      # - bash: |
      #     cargo cache
      #     cargo cache --autoclean
      #     cargo cache
      #   displayName: run cargo cache --autoclean
